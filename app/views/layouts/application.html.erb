<!DOCTYPE html>
<html>
  <head>
    <title>アプリ名</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>

    <%= stylesheet_link_tag "tailwind", "application", "data-turbo-track": "reload", preload: false %>
    
    <!-- Application CSS をインライン埋め込み -->
    <style>
      .thumbnail {
          max-width: 200px;
          max-height: 200px;
          object-fit: cover;
          display: block;
        }

      /* コンパクトコメントハイライト用スタイル */
      .compact-comment-highlight {
        background-color: #fef3c7 !important;
        border-color: #f59e0b !important;
        box-shadow: 0 0 20px rgba(245, 158, 11, 0.3) !important;
        transform: scale(1.02);
        transition: all 0.3s ease-in-out;
      }

      /* line-clamp-2 utility for text truncation */
      .line-clamp-2 {
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
      }

      /* レスポンシブ調整 */
      @media (max-width: 1279px) {
        .xl\\:col-span-6 {
          grid-column: span 12 / span 12;
        }
        .xl\\:col-span-3 {
          grid-column: span 12 / span 12;
        }
      }

      /* カスタムメディアプレーヤーのスタイル */
      .custom-video {
        background: #000;
        border-radius: 12px;
        overflow: hidden;
      }

      .custom-video::-webkit-media-controls-panel {
        background: linear-gradient(to bottom, transparent, rgba(0,0,0,0.7));
      }

      .custom-audio {
        border-radius: 8px;
        height: 54px;
        background: transparent;
      }

      .custom-audio::-webkit-media-controls-panel {
        background: rgba(255, 255, 255, 0.1);
        border-radius: 8px;
      }

      .custom-audio::-webkit-media-controls-play-button,
      .custom-audio::-webkit-media-controls-pause-button {
        background-color: rgba(255, 255, 255, 0.95);
        border-radius: 50%;
        filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.1));
      }

      .custom-audio::-webkit-media-controls-timeline {
        background: rgba(255, 255, 255, 0.3);
        border-radius: 4px;
      }

      /* ダウンロードボタンを完全に隠す */
      video::-webkit-media-controls-download-button,
      audio::-webkit-media-controls-download-button {
        display: none !important;
      }

      video::-internal-media-controls-download-button,
      audio::-internal-media-controls-download-button {
        display: none !important;
      }

      /* 右クリック無効化のスタイル */
      .no-context-menu {
        -webkit-user-select: none;
        -khtml-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
      }


      /* LINE風チャットルームのスタイル */

      .chat-container {
        display: flex;
        flex-direction: column;
        height: 100vh;
        background-color: #79a2d1;
      }

      .chat-header {
        background-color: #3d4a5d;
        color: white;
        padding: 15px;
        text-align: center;
      }

      .chat-header h2 {
        margin: 0;
        font-size: 1.2em;
      }

      .chat-box {
        flex-grow: 1;
        overflow-y: auto;
        padding: 20px;
        display: flex;
        flex-direction: column;
      }

      .message-row {
        display: flex;
        margin-bottom: 15px;
      }

      .message-row.sent {
        justify-content: flex-end;
      }

      .message-row.received {
        justify-content: flex-start;
      }

      .message {
        max-width: 70%;
        display: flex;
        align-items: flex-end;
      }

      .message-body {
        padding: 10px 15px;
        border-radius: 20px;
        color: #333;
        word-wrap: break-word;
      }

      .sent .message-body {
        background-color: #8de055;
        color: black;
      }

      .received .message-body {
        background-color: #ffffff;
      }

      .message-time {
        font-size: 0.75em;
        color: #999;
        margin: 0 5px;
        white-space: nowrap;
      }

      .message-form-container {
        padding: 10px;
        background-color: #f0f0f0;
        border-top: 1px solid #ddd;
      }

      .message-form {
        display: flex;
        align-items: center;
      }

      .message-form textarea {
        flex-grow: 1;
        border-radius: 20px;
        border: 1px solid #ccc;
        padding: 10px 15px;
        resize: none;
        min-height: 20px;
        max-height: 100px;
        overflow-y: auto;
      }

      .send-button {
        background-color: #4CAF50;
        color: white;
        border: none;
        padding: 10px 15px;
        border-radius: 20px;
        margin-left: 10px;
        cursor: pointer;
      }

      .send-button:hover {
        background-color: #45a049;
      }


      /* レスポンシブサイドバー強制スタイル */
      #sidebar {
        position: fixed !important;
        top: 0 !important;
        left: 0 !important;
        z-index: 50 !important;
        width: 16rem !important;
        height: 100vh !important;
        background-color: #f9fafb !important;
        border-right: 1px solid #d1d5db !important;
        padding: 1rem !important;
        display: flex !important;
        flex-direction: column !important;
        transition: transform 0.3s ease-in-out !important;
        transform: translateX(0) !important;
        overflow-y: auto !important;
      }

      @media (max-width: 767px) {
        #sidebar {
          transform: translateX(-100%) !important;
          box-shadow: 2px 0 5px rgba(0,0,0,0.1);
        }
        #sidebar.show-mobile {
          transform: translateX(0) !important;
        }
        #hamburger-btn {
          display: block !important;
        }
        #main-content {
          margin-left: 0 !important;
          padding-left: 1rem !important;
        }
        
        /* オーバーレイ表示時のサイドバー */
        #overlay:not(.hidden) + .flex #sidebar {
          transform: translateX(0) !important;
        }
      }

      @media (min-width: 768px) {
        #sidebar {
          transform: translateX(0) !important;
        }
        #hamburger-btn {
          display: none !important;
        }
        #main-content {
          margin-left: 16rem !important;
        }
      }

      #main-content {
        flex: 1;
        padding: 1rem;
        padding-top: 4rem;
        padding-bottom: 6rem; /* 下部メニューバー分のマージン */
        width: 100%;
      }

      @media (min-width: 768px) {
        #main-content {
          padding: 2rem;
          padding-top: 2rem;
          padding-bottom: 2rem; /* PCでは下部メニューがないので通常マージン */
        }
      }
      
      /* 下部ナビゲーション用の極小テキスト */
      .text-2xs {
        font-size: 0.55rem; /* 8.8px */
        line-height: 0.65rem; /* 10.4px */
        letter-spacing: -0.025em; /* 文字間を少し詰める */
        white-space: nowrap; /* 改行を防ぐ */
      }
    </style>
    
    <!-- Stimulus JavaScript -->
    <script type="module">
      import { Application, Controller } from "https://unpkg.com/@hotwired/stimulus/dist/stimulus.js"
      
      const application = Application.start()
      
      // Image Test Controller
      class ImageTestController extends Controller {
        static targets = ["image"]
        
        connect() {
          console.log("Image Test Controller connected!")
        }

        imageClicked() {
          console.log("Image clicked via test controller!")
          alert("Image click detected!")
        }
      }
      
      // Image Comments Controller  
      class ImageCommentsController extends Controller {
        static targets = ["image", "form", "commentForm", "markersContainer", "toggleButton", "toggleIcon", "toggleText", "markerCount"]
        static values = { postId: Number, readOnly: Boolean }

        connect() {
          console.log("Image Comments Controller connected!")
          console.log("Post ID:", this.postIdValue)
          console.log("Read Only:", this.readOnlyValue)
          console.log("Available targets:", this.targets)
          console.log("Has toggleButton target:", this.hasToggleButtonTarget)
          
          // グローバル設定があれば初期状態はそれに従う、読み取り専用の場合
          if (this.readOnlyValue) {
            this.markersVisible = localStorage.getItem('globalCommentPinsVisible') === 'true'
          } else {
            this.markersVisible = false // 詳細ページでは従来通り
          }
          
          // 読み取り専用でない場合のみクリックリスナーを設定
          if (!this.readOnlyValue) {
            this.setupImageClickListener()
          }
          
          this.loadExistingComments()
          this.setupResizeListener()
          this.updateToggleButton()
          
          // グローバルピン切り替えイベントを監視（すべてのモードで）
          window.addEventListener('globalCommentPinsToggled', this.handleGlobalToggle.bind(this))
        }

        setupResizeListener() {
          // ウィンドウリサイズ時にマーカーの位置を再計算
          let resizeTimeout
          window.addEventListener('resize', () => {
            clearTimeout(resizeTimeout)
            resizeTimeout = setTimeout(() => {
              if (this.existingComments) {
                console.log("Recalculating marker positions after resize")
                this.renderComments(this.existingComments)
              }
            }, 150) // デバウンス処理
          })
        }

        setupImageClickListener() {
          console.log("Setting up image click listener...")
          if (!this.hasImageTarget) {
            console.error("Image target not found!")
            return
          }
          
          this.imageTarget.addEventListener("click", (event) => {
            console.log("Image clicked!")
            const rect = this.imageTarget.getBoundingClientRect()
            const x = event.clientX - rect.left
            const y = event.clientY - rect.top
            
            // 画像に対する相対的な位置（パーセンテージ）で保存
            const xPercent = (x / rect.width) * 100
            const yPercent = (y / rect.height) * 100
            
            console.log(`Click position: ${x}, ${y} (${xPercent.toFixed(2)}%, ${yPercent.toFixed(2)}%)`)
            
            this.hideForm()
            this.showFormAt(x, y, xPercent, yPercent)
          })
        }

        showFormAt(x, y, xPercent, yPercent) {
          console.log("Showing form at:", x, y, `(${xPercent}%, ${yPercent}%)`)
          if (!this.hasFormTarget) {
            console.error("Form target not found!")
            return
          }
          
          this.formTarget.style.left = x + "px"
          this.formTarget.style.top = y + "px"
          this.formTarget.classList.remove("hidden")
          console.log("Form should be visible now")
          
          // パーセンテージで位置を保存
          const xField = this.formTarget.querySelector("input[name='comment[x_position]']")
          const yField = this.formTarget.querySelector("input[name='comment[y_position]']")
          
          if (xField) xField.value = xPercent.toFixed(2)
          if (yField) yField.value = yPercent.toFixed(2)
          
          const textarea = this.formTarget.querySelector("textarea")
          if (textarea) {
            textarea.focus()
            textarea.value = ""
          }
        }

        hideForm() {
          if (this.hasFormTarget) {
            this.formTarget.classList.add("hidden")
          }
        }

        async loadExistingComments() {
          console.log("Loading existing comments...")
          
          try {
            const response = await fetch(`/posts/${this.postIdValue}/comments.json`)
            if (response.ok) {
              const comments = await response.json()
              const imageComments = comments.filter(comment => 
                comment.x_position !== null && comment.y_position !== null
              )
              console.log("Loaded image comments:", imageComments)
              this.existingComments = imageComments
              
              // 画像が読み込み完了してからコメントを描画
              if (this.hasImageTarget) {
                if (this.imageTarget.complete && this.imageTarget.naturalWidth > 0) {
                  this.renderComments(imageComments)
                } else {
                  this.imageTarget.addEventListener('load', () => {
                    this.renderComments(imageComments)
                  }, { once: true })
                  // フォールバック
                  setTimeout(() => {
                    this.renderComments(imageComments)
                  }, 200)
                }
              }
              
              // 読み取り専用モードで既存のコメントがある場合は初期状態でマーカーを表示
              if (this.readOnlyValue && imageComments.length > 0) {
                this.markersVisible = localStorage.getItem('globalCommentPinsVisible') === 'true'
              } else if (imageComments.length > 0) {
                this.markersVisible = true
              }
            } else {
              console.log("Could not load comments via API, using fallback")
              this.loadCommentsFromDOM()
            }
          } catch (error) {
            console.error("Error loading comments:", error)
            this.loadCommentsFromDOM()
          }
        }

        loadCommentsFromDOM() {
          // フォールバック: DOM要素から読み込み
          const commentElements = document.querySelectorAll('[data-comment-id]')
          const comments = []
          
          commentElements.forEach((element, index) => {
            const commentId = element.dataset.commentId
            const commentText = element.querySelector('p')?.textContent
            
            if (commentText && element.closest('.bg-blue-50')) {
              comments.push({
                id: commentId,
                body: commentText.trim(),
                x_position: 25 + (index * 10), // 仮の位置（パーセンテージ）
                y_position: 25 + (index * 5),
                number: index + 1
              })
            }
          })
          
          this.existingComments = comments
          this.renderComments(comments)
          
          // 既存のコメントがある場合は初期状態でマーカーを表示
          if (comments.length > 0) {
            this.markersVisible = true
          }
        }

        renderComments(comments) {
          if (!this.hasMarkersContainerTarget) {
            console.error("Markers container not found!")
            return
          }
          
          const container = this.markersContainerTarget
          container.innerHTML = "" // 既存のマーカーをクリア
          
          comments.forEach((comment, index) => {
            this.createMarker(comment, index + 1)
          })
          
          // マーカー表示状態を更新
          if (this.hasMarkersContainerTarget) {
            this.markersContainerTarget.style.display = this.markersVisible ? 'block' : 'none'
          }
          this.updateToggleButton()
        }

        createMarker(comment, number) {
          if (!this.hasImageTarget) {
            console.error("Image target not found for marker creation!")
            return
          }
          
          const marker = document.createElement("div")
          marker.className = "absolute w-8 h-8 bg-blue-500 text-white rounded-full flex items-center justify-center text-sm font-bold cursor-pointer z-10 transform -translate-x-1/2 -translate-y-1/2 transition-all duration-200 hover:scale-110"
          marker.textContent = number
          marker.dataset.commentId = comment.id
          marker.style.pointerEvents = "auto"
          
          // 画像が読み込み完了してからマーカーの位置を設定
          const positionMarker = () => {
            const imageRect = this.imageTarget.getBoundingClientRect()
            console.log(`Image rect for marker ${number}:`, imageRect.width, 'x', imageRect.height)
            
            // 画像サイズが0の場合は少し待ってから再試行
            if (imageRect.width === 0 || imageRect.height === 0) {
              console.log(`Image not ready for marker ${number}, retrying...`)
              setTimeout(positionMarker, 100)
              return
            }
            
            const xPixel = (comment.x_position / 100) * imageRect.width
            const yPixel = (comment.y_position / 100) * imageRect.height
            
            marker.style.left = `${xPixel}px`
            marker.style.top = `${yPixel}px`
            
            console.log(`Marker #${number} positioned at (${xPixel}, ${yPixel}) from (${comment.x_position}%, ${comment.y_position}%)`)
          }
          
          // 画像が既に読み込まれているかチェック
          if (this.imageTarget.complete && this.imageTarget.naturalWidth > 0) {
            positionMarker()
          } else {
            // 画像の読み込み完了を待つ
            this.imageTarget.addEventListener('load', positionMarker, { once: true })
            // 既に読み込み済みの場合のフォールバック
            setTimeout(positionMarker, 100)
          }
          
          // ツールチップ作成
          const tooltip = document.createElement("div")
          tooltip.className = "absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 bg-gray-800 text-white text-xs rounded py-1 px-2 whitespace-nowrap z-20 opacity-0 transition-opacity duration-200 pointer-events-none"
          tooltip.textContent = comment.body
          tooltip.style.maxWidth = "300px"
          tooltip.style.whiteSpace = "nowrap"
          tooltip.style.overflow = "hidden"
          tooltip.style.textOverflow = "ellipsis"
          
          // マーカーにツールチップを追加
          marker.appendChild(tooltip)
          
          // ホバーイベント
          marker.addEventListener("mouseenter", () => {
            tooltip.style.opacity = "1"
          })
          
          marker.addEventListener("mouseleave", () => {
            tooltip.style.opacity = "0"
          })
          
          // マーカーコンテナーに追加
          this.markersContainerTarget.appendChild(marker)
          console.log(`Created marker #${number} at (${comment.x_position}, ${comment.y_position})`)
        }

        async submitComment(event) {
          event.preventDefault()
          console.log("Submitting comment...")
          
          const form = event.target
          const formData = new FormData(form)
          
          try {
            const response = await fetch(form.action, {
              method: 'POST',
              body: formData,
              headers: {
                'Accept': 'application/json',
                'X-Requested-With': 'XMLHttpRequest',
                'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
              }
            })
            
            if (response.ok) {
              const comment = await response.json()
              console.log("Comment submitted successfully:", comment)
              
              // 新しいマーカーを追加
              const currentMarkersCount = this.markersContainerTarget.children.length
              this.createMarker(comment, currentMarkersCount + 1)
              
              // マーカーを表示状態に切り替え
              this.markersVisible = true
              if (this.hasMarkersContainerTarget) {
                this.markersContainerTarget.style.display = 'block'
              }
              this.updateToggleButton()
              
              // フォームを非表示にする
              this.hideForm()
              
              // 成功メッセージを表示
              this.showSuccessMessage()
              
              // 1秒後にページをリロードして通常のコメント一覧も更新
              setTimeout(() => {
                window.location.reload()
              }, 1000)
            } else {
              const errorData = await response.json()
              console.error('Comment submission failed:', errorData)
              alert('コメントの投稿に失敗しました。')
            }
          } catch (error) {
            console.error('Error submitting comment:', error)
            alert('エラーが発生しました。')
          }
        }

        showSuccessMessage() {
          const message = document.createElement('div')
          message.className = 'fixed top-4 right-4 bg-green-500 text-white px-4 py-2 rounded shadow-lg z-50'
          message.textContent = 'コメントを投稿しました！'
          document.body.appendChild(message)
          
          setTimeout(() => {
            message.remove()
          }, 3000)
        }

        toggleMarkers() {
          console.log("Toggling markers visibility")
          console.log("Current state:", this.markersVisible)
          console.log("Has markers container:", this.hasMarkersContainerTarget)
          
          this.markersVisible = !this.markersVisible
          console.log("New state:", this.markersVisible)
          
          if (this.hasMarkersContainerTarget) {
            const container = this.markersContainerTarget
            console.log("Container children count:", container.children.length)
            container.style.display = this.markersVisible ? 'block' : 'none'
            console.log("Container display set to:", container.style.display)
          }
          
          this.updateToggleButton()
          
          // 詳細ページで個別トグルを操作した場合、グローバル状態も更新
          if (!this.readOnlyValue) {
            localStorage.setItem('globalCommentPinsVisible', this.markersVisible)
            // グローバルコントローラーにも通知
            const globalController = document.querySelector('[data-controller*="global-comment-pins"]')
            if (globalController) {
              const controller = this.application.getControllerForElementAndIdentifier(globalController, 'global-comment-pins')
              if (controller) {
                controller.syncFromIndividual(this.markersVisible)
              }
            }
          }
        }

        updateToggleButton() {
          if (!this.hasToggleButtonTarget) return
          
          const button = this.toggleButtonTarget
          const icon = this.hasToggleIconTarget ? this.toggleIconTarget : null
          const text = this.hasToggleTextTarget ? this.toggleTextTarget : null
          const count = this.hasMarkerCountTarget ? this.markerCountTarget : null
          
          if (this.markersVisible) {
            // マーカー表示中の状態
            button.classList.remove('border-gray-300', 'hover:bg-gray-50')
            button.classList.add('border-blue-500', 'bg-blue-50', 'text-blue-700')
            if (icon) icon.textContent = '🙈'
            if (text) text.textContent = 'コメントピンを非表示'
          } else {
            // マーカー非表示中の状態
            button.classList.remove('border-blue-500', 'bg-blue-50', 'text-blue-700')
            button.classList.add('border-gray-300', 'hover:bg-gray-50')
            if (icon) icon.textContent = '👁️'
            if (text) text.textContent = 'コメントピンを表示'
          }
          
          // マーカー数を表示
          if (count && this.hasMarkersContainerTarget) {
            const markerCount = this.markersContainerTarget.children.length
            if (markerCount > 0) {
              count.textContent = `(${markerCount}件のコメント)`
            } else {
              count.textContent = ''
            }
          }
        }

        // グローバルピン切り替えイベントのハンドラー
        handleGlobalToggle(event) {
          console.log("Global toggle received:", event.detail.visible, "ReadOnly:", this.readOnlyValue)
          this.markersVisible = event.detail.visible
          if (this.hasMarkersContainerTarget) {
            this.markersContainerTarget.style.display = this.markersVisible ? 'block' : 'none'
          }
          this.updateToggleButton()
        }

        // グローバルコントローラーから呼び出される関数
        setGlobalMarkersVisibility(visible) {
          console.log("Setting global visibility:", visible, "ReadOnly:", this.readOnlyValue)
          this.markersVisible = visible
          if (this.hasMarkersContainerTarget) {
            this.markersContainerTarget.style.display = this.markersVisible ? 'block' : 'none'
          }
          this.updateToggleButton()
        }

        disconnect() {
          // イベントリスナーを削除（すべてのモードで）
          window.removeEventListener('globalCommentPinsToggled', this.handleGlobalToggle.bind(this))
        }
      }

      // Global Comment Pins Controller
      class GlobalCommentPinsController extends Controller {
        static targets = ["toggleButton", "toggleIcon", "toggleText"]

        connect() {
          console.log("Global Comment Pins Controller connected!")
          this.globalPinsVisible = localStorage.getItem('globalCommentPinsVisible') === 'true'
          this.updateButtonState()
          this.updateAllPins()
        }

        toggleGlobalPins() {
          console.log("Toggling global comment pins")
          this.globalPinsVisible = !this.globalPinsVisible
          localStorage.setItem('globalCommentPinsVisible', this.globalPinsVisible)
          
          this.updateButtonState()
          this.updateAllPins()
          
          // カスタムイベントを発火して他のコントローラーに通知
          window.dispatchEvent(new CustomEvent('globalCommentPinsToggled', {
            detail: { visible: this.globalPinsVisible }
          }))
        }

        updateButtonState() {
          this.updateAllButtons()
        }
        
        updateAllButtons() {
          // すべてのglobal-comment-pinsコントローラーのボタンを更新
          const allElements = document.querySelectorAll('[data-controller*="global-comment-pins"]')
          allElements.forEach(element => {
            this.updateButton(element)
          })
        }
        
        updateButton(element) {
          const button = element.querySelector('[data-global-comment-pins-target="toggleButton"]')
          const icon = element.querySelector('[data-global-comment-pins-target="toggleIcon"]')
          const text = element.querySelector('[data-global-comment-pins-target="toggleText"]')

          if (!button) return

          if (this.globalPinsVisible) {
            // ON状態: モバイルボタンはほぼ白、サイドバーボタンは青
            if (element.closest('.md\\:hidden')) {
              // モバイルボタン（丸いボタン）
              button.classList.remove('bg-emerald-300', 'hover:bg-emerald-400', 'text-white')
              button.classList.add('bg-gray-100', 'hover:bg-gray-200', 'text-gray-600')
              if (icon) icon.textContent = '📍'
            } else {
              // サイドバーボタン
              button.classList.remove('border-gray-300', 'hover:bg-gray-50')
              button.classList.add('border-blue-500', 'bg-blue-50', 'text-blue-700')
              if (icon) icon.textContent = '🙈'
              if (text) text.textContent = 'コメントピン一括非表示'
            }
          } else {
            // OFF状態
            if (element.closest('.md\\:hidden')) {
              // モバイルボタン（丸いボタン）
              button.classList.remove('bg-gray-100', 'hover:bg-gray-200', 'text-gray-600')
              button.classList.add('bg-emerald-300', 'hover:bg-emerald-400', 'text-white')
              if (icon) icon.textContent = '📍'
            } else {
              // サイドバーボタン
              button.classList.remove('border-blue-500', 'bg-blue-50', 'text-blue-700')
              button.classList.add('border-gray-300', 'hover:bg-gray-50')
              if (icon) icon.textContent = '👁️'
              if (text) text.textContent = 'コメントピン一括表示'
            }
          }
        }

        updateAllPins() {
          // すべてのimage-commentsコントローラーのマーカーの表示状態を更新
          const imageCommentsElements = document.querySelectorAll('[data-controller*="image-comments"]')
          imageCommentsElements.forEach(element => {
            const controller = this.application.getControllerForElementAndIdentifier(element, 'image-comments')
            if (controller) {
              controller.setGlobalMarkersVisibility(this.globalPinsVisible)
            }
          })
        }

        // 個別コントローラーからの同期
        syncFromIndividual(visible) {
          this.globalPinsVisible = visible
          this.updateAllButtons()
        }
      }
      
      // AI Comment Assistant Controller
      class AiCommentAssistantController extends Controller {
        static targets = [
          "toggleButton", "assistantContent", "loading", "results", "error",
          "commentExamples", "observationPoints", "observationToggle", "observationIcon"
        ]
        static values = { postId: Number }

        connect() {
          console.log("AI Comment Assistant Controller connected!")
          console.log("Post ID:", this.postIdValue)
        }

        async toggleAssistant() {
          const isHidden = this.assistantContentTarget.classList.contains('hidden')
          
          if (isHidden) {
            // 補助機能を開始
            this.assistantContentTarget.classList.remove('hidden')
            this.toggleButtonTarget.textContent = '補助を閉じる'
            this.toggleButtonTarget.classList.remove('bg-blue-600', 'hover:bg-blue-700')
            this.toggleButtonTarget.classList.add('bg-gray-500', 'hover:bg-gray-600')
            
            // 既に結果が表示されている場合は分析をスキップ
            if (!this.resultsTarget.classList.contains('hidden')) {
              return
            }
            
            // AI分析を開始
            await this.analyzePost()
          } else {
            // 補助機能を閉じる
            this.assistantContentTarget.classList.add('hidden')
            this.toggleButtonTarget.textContent = '補助を開始'
            this.toggleButtonTarget.classList.remove('bg-gray-500', 'hover:bg-gray-600')
            this.toggleButtonTarget.classList.add('bg-blue-600', 'hover:bg-blue-700')
          }
        }

        async analyzePost() {
          // ローディング表示
          this.showLoading()
          
          try {
            const response = await fetch(`/posts/${this.postIdValue}/ai_comment_assistant/analyze`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content,
                'Accept': 'application/json'
              }
            })
            
            const data = await response.json()
            
            if (data.success) {
              this.displayResults(data.comment_examples, data.observation_points)
            } else {
              this.showError(data.error || 'AI分析中にエラーが発生しました。')
            }
          } catch (error) {
            console.error('AI Comment Assistant Error:', error)
            this.showError('ネットワークエラーが発生しました。インターネット接続を確認してください。')
          }
        }

        showLoading() {
          this.hideAllStates()
          this.loadingTarget.classList.remove('hidden')
        }

        displayResults(commentExamples, observationPoints) {
          this.hideAllStates()
          
          // コメント例を表示
          this.renderCommentExamples(commentExamples)
          
          // 観察ポイントを表示
          this.renderObservationPoints(observationPoints)
          
          this.resultsTarget.classList.remove('hidden')
        }

        showError(message) {
          this.hideAllStates()
          this.errorTarget.textContent = message
          this.errorTarget.classList.remove('hidden')
        }

        hideAllStates() {
          this.loadingTarget.classList.add('hidden')
          this.resultsTarget.classList.add('hidden')
          this.errorTarget.classList.add('hidden')
        }

        renderCommentExamples(examples) {
          this.commentExamplesTarget.innerHTML = ''
          
          examples.forEach((example, index) => {
            const exampleDiv = document.createElement('div')
            exampleDiv.className = 'p-3 bg-white rounded-lg border border-gray-200 hover:border-blue-300 transition-colors cursor-pointer'
            exampleDiv.innerHTML = `
              <div class="flex items-start gap-3">
                <span class="flex-shrink-0 w-6 h-6 bg-blue-100 text-blue-600 rounded-full flex items-center justify-center text-sm font-semibold">${index + 1}</span>
                <div class="flex-1">
                  <p class="text-gray-800 leading-relaxed">${this.escapeHtml(example)}</p>
                  <div class="mt-2 flex gap-2">
                    <button type="button" 
                            class="text-xs text-blue-600 hover:text-blue-800 font-medium"
                            data-action="click->ai-comment-assistant#useComment"
                            data-comment="${this.escapeHtml(example)}">
                      このコメントを使用
                    </button>
                    <button type="button" 
                            class="text-xs text-gray-500 hover:text-gray-700 font-medium"
                            data-action="click->ai-comment-assistant#editComment"
                            data-comment="${this.escapeHtml(example)}">
                      編集して使用
                    </button>
                  </div>
                </div>
              </div>
            `
            this.commentExamplesTarget.appendChild(exampleDiv)
          })
        }

        renderObservationPoints(points) {
          this.observationPointsTarget.innerHTML = ''
          
          const pointsList = document.createElement('ul')
          pointsList.className = 'space-y-2'
          
          points.forEach(point => {
            const li = document.createElement('li')
            li.className = 'flex items-start gap-2 text-gray-700'
            li.innerHTML = `
              <span class="flex-shrink-0 w-2 h-2 bg-blue-400 rounded-full mt-2"></span>
              <span>${this.escapeHtml(point)}</span>
            `
            pointsList.appendChild(li)
          })
          
          this.observationPointsTarget.appendChild(pointsList)
        }

        toggleObservationPoints() {
          const isHidden = this.observationPointsTarget.classList.contains('hidden')
          
          if (isHidden) {
            this.observationPointsTarget.classList.remove('hidden')
            this.observationIconTarget.textContent = '▲'
          } else {
            this.observationPointsTarget.classList.add('hidden')
            this.observationIconTarget.textContent = '▼'
          }
        }

        useComment(event) {
          const comment = event.currentTarget.dataset.comment
          this.insertCommentIntoForm(comment)
        }

        editComment(event) {
          const comment = event.currentTarget.dataset.comment
          this.insertCommentIntoForm(comment)
          
          // コメントフォームにフォーカスを当てる
          const commentTextArea = document.querySelector('textarea[name="comment[body]"]')
          if (commentTextArea) {
            commentTextArea.focus()
            // テキストの最後にカーソルを移動
            commentTextArea.setSelectionRange(commentTextArea.value.length, commentTextArea.value.length)
          }
        }

        insertCommentIntoForm(comment) {
          const commentTextArea = document.querySelector('textarea[name="comment[body]"]')
          if (commentTextArea) {
            commentTextArea.value = comment
            
            // 高さを自動調整（もしauto-resizeがある場合）
            commentTextArea.dispatchEvent(new Event('input', { bubbles: true }))
            
            // 成功フィードバック
            this.showSuccessMessage('コメントをフォームに挿入しました')
          } else {
            console.error('Comment textarea not found')
            alert('コメントフォームが見つかりません')
          }
        }

        showSuccessMessage(message) {
          const successDiv = document.createElement('div')
          successDiv.className = 'fixed top-4 right-4 bg-green-500 text-white px-4 py-2 rounded-lg shadow-lg z-50 transform translate-x-0 opacity-100 transition-all duration-300'
          successDiv.textContent = message
          
          document.body.appendChild(successDiv)
          
          // 3秒後にフェードアウト
          setTimeout(() => {
            successDiv.classList.add('translate-x-full', 'opacity-0')
            setTimeout(() => {
              if (successDiv.parentNode) {
                successDiv.parentNode.removeChild(successDiv)
              }
            }, 300)
          }, 3000)
        }

        escapeHtml(text) {
          const div = document.createElement('div')
          div.textContent = text
          return div.innerHTML
        }
      }
      
      // Compact Comments Controller
      class CompactCommentsController extends Controller {
        static targets = ["toggleButton", "toggleIcon", "commentsList"]

        connect() {
          console.log("Compact Comments Controller connected!")
          this.isExpanded = false
        }

        toggleComments() {
          this.isExpanded = !this.isExpanded
          
          if (this.isExpanded) {
            // コメント一覧を表示
            this.commentsListTarget.classList.remove('hidden')
            this.toggleIconTarget.textContent = '▲'
          } else {
            // コメント一覧を非表示
            this.commentsListTarget.classList.add('hidden')
            this.toggleIconTarget.textContent = '▼'
          }
        }

        // コンパクトコメントがクリックされた時の処理
        highlightComment(event) {
          const commentElement = event.currentTarget
          const commentId = commentElement.dataset.commentId
          
          // 既存のハイライトをリセット
          document.querySelectorAll('.compact-comment-highlight').forEach(el => {
            el.classList.remove('compact-comment-highlight')
          })
          
          // クリックされたコメントをハイライト
          commentElement.classList.add('compact-comment-highlight')
          
          // 対応するピンがあればハイライト（既存の機能を活用）
          if (commentId) {
            const imageController = document.querySelector('[data-controller*="image-comments"]')
            if (imageController) {
              const event = new CustomEvent('highlightMarker', {
                detail: { commentId: commentId }
              })
              imageController.dispatchEvent(event)
            }
          }
          
          // 2秒後にハイライトを削除
          setTimeout(() => {
            commentElement.classList.remove('compact-comment-highlight')
          }, 2000)
        }
      }
      
      // AI Sidebar Controller (updated)
      class AiSidebarController extends Controller {
        static targets = [
          "toggleButton", "toggleIcon", "toggleText", 
          "initialMessage", "loading", "aiContent",
          "vocabularies", "summary"
        ]
        static values = { postId: Number }

        connect() {
          console.log("AI Sidebar Controller connected!")
          this.aiLoaded = false
        }

        toggleAI() {
          const isAIVisible = !this.aiContentTarget.classList.contains('hidden')
          
          if (isAIVisible) {
            // AI機能を閉じる
            this.closeAI()
          } else {
            // AI機能を開始
            this.startAI()
          }
        }

        async startAI() {
          // 初期メッセージを隠す
          this.initialMessageTarget.classList.add('hidden')
          
          // ローディング表示
          this.loadingTarget.classList.remove('hidden')
          
          // ボタンの状態を更新
          this.toggleIconTarget.textContent = '⏳'
          this.toggleTextTarget.textContent = 'AI分析中...'
          this.toggleButtonTarget.disabled = true

          try {
            if (!this.aiLoaded) {
              // AI機能を初回のみ読み込み
              await this.loadAIContent()
              this.aiLoaded = true
            }
            
            // ローディングを隠してコンテンツを表示
            this.loadingTarget.classList.add('hidden')
            this.aiContentTarget.classList.remove('hidden')
            
            // ボタンの状態を更新
            this.toggleIconTarget.textContent = '✖️'
            this.toggleTextTarget.textContent = 'AI補助を閉じる'
            this.toggleButtonTarget.classList.remove('bg-purple-600', 'hover:bg-purple-700')
            this.toggleButtonTarget.classList.add('bg-gray-600', 'hover:bg-gray-700')
            
          } catch (error) {
            console.error('AI loading error:', error)
            this.showError(error.message)
          } finally {
            this.toggleButtonTarget.disabled = false
          }
        }

        closeAI() {
          // すべてのAI関連要素を隠す
          this.loadingTarget.classList.add('hidden')
          this.aiContentTarget.classList.add('hidden')
          
          // 初期メッセージを表示
          this.initialMessageTarget.classList.remove('hidden')
          
          // ボタンの状態をリセット
          this.toggleIconTarget.textContent = '🤖'
          this.toggleTextTarget.textContent = 'AI補助を開始'
          this.toggleButtonTarget.classList.remove('bg-gray-600', 'hover:bg-gray-700')
          this.toggleButtonTarget.classList.add('bg-purple-600', 'hover:bg-purple-700')
        }

        async loadAIContent() {
          try {
            console.log('Starting AI analysis for post:', this.postIdValue)
            
            const response = await fetch(`/posts/${this.postIdValue}/ai_comment_assistant/analyze`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
              },
              body: JSON.stringify({})
            })

            console.log('Response status:', response.status)

            if (!response.ok) {
              const errorText = await response.text()
              console.error('API error response:', errorText)
              throw new Error(`AI API エラー (${response.status}): ${errorText}`)
            }

            const data = await response.json()
            console.log('AI analysis result:', data)
            
            if (!data.success) {
              throw new Error(data.error || 'AI分析に失敗しました')
            }
            
            // 語彙・表現を表示
            this.renderVocabularies(data.vocabularies || [])
            
            // 観察ポイントを表示
            if (this.hasSummaryTarget) {
              this.summaryTarget.innerHTML = ''
              data.observation_points.slice(0, 4).forEach((point, index) => {
                const pointDiv = document.createElement('div')
                pointDiv.className = 'flex items-start gap-3 p-3 bg-white rounded-lg border border-purple-200 shadow-sm'
                pointDiv.innerHTML = `
                  <div class="w-6 h-6 bg-gradient-to-r from-purple-400 to-indigo-400 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5">
                    <span class="text-white text-xs font-bold">${index + 1}</span>
                  </div>
                  <p class="text-sm text-gray-700 leading-relaxed font-medium">${point}</p>
                `
                this.summaryTarget.appendChild(pointDiv)
              })
            }
            console.log('AI content rendered successfully')
          } catch (error) {
            console.error('Error loading AI content:', error)
            this.showError(error.message)
          }
        }

        renderVocabularies(vocabularies) {
          if (this.hasVocabulariesTarget) {
            this.vocabulariesTarget.innerHTML = ''
            
            // フォールバック語彙がない場合のデフォルト
            const vocabsToShow = vocabularies.length > 0 ? vocabularies.slice(0, 8) : [
              '美しい', '印象的', '繊細', '力強い', 
              '調和', '表現力', '創造性', '独創的'
            ]
            
            vocabsToShow.forEach(vocab => {
              const vocabButton = document.createElement('button')
              vocabButton.type = 'button' // typeを明示的に設定
              vocabButton.className = 'px-3 py-2 bg-white border-2 border-emerald-300 rounded-full text-sm font-medium text-emerald-700 hover:bg-emerald-50 hover:border-emerald-400 transition-all transform hover:scale-105 cursor-pointer'
              vocabButton.textContent = vocab
              
              // より確実なイベントリスナー設定
              vocabButton.addEventListener('click', (e) => {
                e.preventDefault()
                e.stopPropagation()
                console.log('Vocabulary button clicked:', vocab)
                this.insertVocabulary(vocab)
              })
              
              this.vocabulariesTarget.appendChild(vocabButton)
            })
            
            console.log('Rendered vocabularies:', vocabsToShow.length)
          } else {
            console.error('Vocabularies target not found!')
          }
        }

        insertVocabulary(vocabulary) {
          console.log('insertVocabulary called with:', vocabulary)
          
          // メインのコメントフォームを優先して検索
          let commentForm = document.querySelector('textarea[data-comment-form-target="textarea"]')
          console.log('Found main comment form:', commentForm)
          
          if (!commentForm) {
            // フォールバック：より大きなtextareaを探す
            const allTextareas = document.querySelectorAll('textarea[name="comment[body]"]')
            console.log('All comment textareas:', allTextareas)
            
            // 最も大きなtextarea（rows属性やclassで判定）を選択
            let mainTextarea = null
            let maxSize = 0
            
            allTextareas.forEach(textarea => {
              const rows = parseInt(textarea.getAttribute('rows') || '1')
              const isMainForm = textarea.classList.contains('w-full') || textarea.getAttribute('data-comment-form-target')
              const size = isMainForm ? rows + 100 : rows // メインフォームに重み付け
              
              console.log('Textarea analysis:', {
                element: textarea,
                rows: rows,
                isMainForm: isMainForm,
                calculatedSize: size,
                classes: textarea.className
              })
              
              if (size > maxSize) {
                maxSize = size
                mainTextarea = textarea
              }
            })
            
            commentForm = mainTextarea
            console.log('Selected textarea:', commentForm, 'with size:', maxSize)
          }
          
          if (commentForm) {
            const currentText = commentForm.value
            const cursorPos = commentForm.selectionStart || currentText.length
            
            // カーソル位置に語彙を挿入
            const newText = currentText.slice(0, cursorPos) + vocabulary + currentText.slice(cursorPos)
            commentForm.value = newText
            
            // カーソル位置を調整
            const newCursorPos = cursorPos + vocabulary.length
            commentForm.setSelectionRange(newCursorPos, newCursorPos)
            
            // フォーカスを戻す
            commentForm.focus()
            
            // inputイベントを発火してStimulusコントローラーに通知
            commentForm.dispatchEvent(new Event('input', { bubbles: true }))
            commentForm.dispatchEvent(new Event('change', { bubbles: true }))
            
            // 成功エフェクト
            this.showInsertionFeedback(vocabulary)
            console.log('Successfully inserted vocabulary into:', commentForm.className)
          } else {
            console.error('Comment form not found!')
            // エラーフィードバック
            this.showInsertionFeedback('エラー：メインコメント欄が見つかりません')
          }
        }

        showInsertionFeedback(vocabulary) {
          const feedback = document.createElement('div')
          feedback.className = 'fixed top-4 right-4 bg-emerald-500 text-white px-4 py-2 rounded-lg shadow-lg z-50 transform scale-100 opacity-100 transition-all'
          feedback.textContent = `「${vocabulary}」を挿入しました`
          document.body.appendChild(feedback)
          
          setTimeout(() => {
            feedback.classList.add('scale-95', 'opacity-0')
            setTimeout(() => feedback.remove(), 200)
          }, 2000)
        }

        showError(message = 'AI分析でエラーが発生しました') {
          // ローディングを隠す
          this.loadingTarget.classList.add('hidden')
          
          // エラーメッセージを表示
          this.aiContentTarget.classList.remove('hidden')
          this.aiContentTarget.innerHTML = `
            <div class="bg-red-50 border-2 border-red-200 rounded-lg p-4">
              <div class="flex items-center gap-2 mb-2">
                <div class="w-6 h-6 bg-red-500 rounded-full flex items-center justify-center">
                  <span class="text-white text-xs">⚠️</span>
                </div>
                <h3 class="text-sm font-bold text-red-800">エラー</h3>
              </div>
              <p class="text-sm text-red-700 mb-3">${message}</p>
              <button 
                type="button" 
                data-action="click->ai-sidebar#retryAI"
                class="px-3 py-1 bg-red-500 text-white text-xs rounded hover:bg-red-600 transition-colors">
                再試行
              </button>
            </div>
          `
          
          // ボタンの状態を更新
          this.toggleIconTarget.textContent = '⚠️'
          this.toggleTextTarget.textContent = 'エラー - 再試行'
          this.toggleButtonTarget.classList.remove('bg-purple-600', 'hover:bg-purple-700')
          this.toggleButtonTarget.classList.add('bg-red-600', 'hover:bg-red-700')
        }

        retryAI() {
          // AIを再試行
          this.aiLoaded = false
          this.startAI()
        }


        insertCommentIntoForm(comment) {
          // メインのコメントフォームを検索
          let commentForm = document.querySelector('textarea[data-comment-form-target="textarea"]')
          
          if (!commentForm) {
            const allTextareas = document.querySelectorAll('textarea[name="comment[body]"]')
            let mainTextarea = null
            let maxSize = 0
            
            allTextareas.forEach(textarea => {
              const rows = parseInt(textarea.getAttribute('rows') || '1')
              const isMainForm = textarea.classList.contains('w-full') || textarea.getAttribute('data-comment-form-target')
              const size = isMainForm ? rows + 100 : rows
              
              if (size > maxSize) {
                maxSize = size
                mainTextarea = textarea
              }
            })
            
            commentForm = mainTextarea
          }
          
          if (commentForm) {
            commentForm.value = comment
            commentForm.focus()
            commentForm.dispatchEvent(new Event('input', { bubbles: true }))
            commentForm.dispatchEvent(new Event('change', { bubbles: true }))
          }
        }
      }

      // Vote Controller (AJAX)
      class VoteController extends Controller {
        static targets = ["barPos", "barNeg", "barLabel", "barWrapper", "up", "down"]
        static values = { votableType: String, votableId: Number, upCount: Number, downCount: Number, userVote: Number }

        connect() {
          this.updateBar()
          this.updateActive()
        }

        upvote() { this.submit(1) }
        downvote() { this.submit(-1) }

        async submit(value) {
          try {
            const params = new URLSearchParams({
              votable_type: this.votableTypeValue,
              votable_id: String(this.votableIdValue),
              value: String(value)
            })
            const response = await fetch(`/vote?${params.toString()}`, {
              method: 'POST',
              headers: {
                'Accept': 'application/json',
                'X-Requested-With': 'XMLHttpRequest',
                'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
              }
            })

            if (!response.ok) {
              console.error('Vote failed with status', response.status)
              return
            }
            const data = await response.json()
            if (response.status === 403 && data && data.user_vote) {
              // 既に投票済み: サーバーの状態で反映
              this.userVoteValue = data.user_vote
            } else if (data && data.success) {
              // 新規投票成功
              this.userVoteValue = data.user_vote
              this.upCountValue = data.up_count
              this.downCountValue = data.down_count
            }
            this.updateBar()
            this.updateActive()
          } catch (e) {
            console.error('Vote error', e)
          }
        }

        
        updateBar() {
          const up = this.upCountValue || 0
          const down = this.downCountValue || 0
          const total = up + down
          const hasVoted = (this.userVoteValue || 0) !== 0

          if (hasVoted) {
            // 色分け表示 + 絶対値の内訳ラベル
            let upPct = 0, downPct = 0
            if (total > 0) {
              upPct = Math.round((up / total) * 100)
              downPct = 100 - upPct
            }
            if (this.hasBarPosTarget) this.barPosTarget.style.width = upPct + '%'
            if (this.hasBarNegTarget) this.barNegTarget.style.width = downPct + '%'
            if (this.hasBarLabelTarget) this.barLabelTarget.textContent = `賛成 ${up} / 反対 ${down}`
          } else {
            // 未投票: グレーバーのみ + 合計ラベル、色の幅は0
            if (this.hasBarPosTarget) this.barPosTarget.style.width = '0%'
            if (this.hasBarNegTarget) this.barNegTarget.style.width = '0%'
            if (this.hasBarLabelTarget) this.barLabelTarget.textContent = `|${total}|`
          }
        }

        updateActive() {
          const voted = (this.userVoteValue || 0)
          const disableButtons = () => {
            ;[this.upTarget, this.downTarget].forEach(btn => {
              if (!btn) return
              btn.disabled = true
              btn.classList.add('opacity-50', 'cursor-not-allowed')
            })
          }
          // Reset
          if (this.hasUpTarget) this.upTarget.classList.remove('text-green-600')
          if (this.hasDownTarget) this.downTarget.classList.remove('text-red-600')

          if (voted === 1) {
            if (this.hasUpTarget) this.upTarget.classList.add('text-green-600')
            disableButtons()
          } else if (voted === -1) {
            if (this.hasDownTarget) this.downTarget.classList.add('text-red-600')
            disableButtons()
          }
        }
      }

      // Profile Wizard Controller
      class ProfileWizardController extends Controller {
        static targets = ["step", "progressBar", "stepIndicator", "prevButton", "nextButton", "submitButton"]
        static values = { totalSteps: Number }
        
        connect() {
          console.log("Profile Wizard Controller connected!")
          this.currentStep = 1
          this.updateUI()
          setTimeout(() => this.initializeSelections(), 100)
        }

        nextStep() {
          if (this.currentStep < this.totalStepsValue) {
            this.currentStep += 1
            this.updateUI()
            this.scrollToTop()
          }
        }

        previousStep() {
          if (this.currentStep > 1) {
            this.currentStep -= 1
            this.updateUI()
            this.scrollToTop()
          }
        }

        selectOption(event) {
          const card = event.currentTarget
          const checkbox = card.querySelector('input[type="checkbox"]')
          
          // チェックボックスの状態を切り替え
          checkbox.checked = !checkbox.checked
          
          // 視覚的フィードバック
          this.updateCardAppearance(card, checkbox.checked)
        }

        selectSingle(event) {
          const card = event.currentTarget
          const radio = card.querySelector('input[type="radio"]')
          const fieldName = radio.name
          
          // 同じ名前の他のラジオボタンをリセット
          document.querySelectorAll(`input[name="${fieldName}"]`).forEach(input => {
            const inputCard = input.closest('.option-card')
            this.updateCardAppearance(inputCard, false)
            input.checked = false
          })
          
          // 選択されたラジオボタンをチェック
          radio.checked = true
          this.updateCardAppearance(card, true)
        }

        updateCardAppearance(card, isSelected) {
          const cardDiv = card.querySelector('div')
          
          if (isSelected) {
            cardDiv.classList.remove('border-gray-200', 'bg-white', 'text-gray-700')
            cardDiv.classList.add('border-blue-600', 'bg-blue-200', 'text-blue-900')
            cardDiv.style.borderWidth = '4px'
            cardDiv.style.boxShadow = '0 0 0 4px rgba(37, 99, 235, 0.4), 0 4px 12px rgba(37, 99, 235, 0.3)'
            cardDiv.style.transform = 'scale(1.02)'
          } else {
            cardDiv.classList.remove('border-blue-600', 'bg-blue-200', 'text-blue-900')
            cardDiv.classList.add('border-gray-200', 'bg-white', 'text-gray-700')
            cardDiv.style.borderWidth = '2px'
            cardDiv.style.boxShadow = 'none'
            cardDiv.style.transform = 'scale(1.0)'
          }
        }

        updateUI() {
          // ステップの表示/非表示
          this.stepTargets.forEach((step, index) => {
            const stepNumber = parseInt(step.dataset.step)
            if (stepNumber === this.currentStep) {
              step.classList.remove('hidden')
              step.classList.add('animate-fade-in')
            } else {
              step.classList.add('hidden')
              step.classList.remove('animate-fade-in')
            }
          })

          // 進捗バーの更新
          const progress = (this.currentStep / this.totalStepsValue) * 100
          this.progressBarTarget.style.width = `${progress}%`

          // ステップインジケーターの更新
          this.stepIndicatorTarget.textContent = `${this.currentStep} / ${this.totalStepsValue}`

          // ボタンの表示制御
          if (this.currentStep === 1) {
            this.prevButtonTarget.classList.add('hidden')
          } else {
            this.prevButtonTarget.classList.remove('hidden')
          }

          if (this.currentStep === this.totalStepsValue) {
            this.nextButtonTarget.classList.add('hidden')
            this.submitButtonTarget.classList.remove('hidden')
          } else {
            this.nextButtonTarget.classList.remove('hidden')
            this.submitButtonTarget.classList.add('hidden')
          }
        }

        scrollToTop() {
          window.scrollTo({ top: 0, behavior: 'smooth' })
        }

        // 初期化時に既存の選択状態を反映
        initializeSelections() {
          // チェックボックスの初期状態を反映
          document.querySelectorAll('.option-card input[type="checkbox"]:checked').forEach(checkbox => {
            const card = checkbox.closest('.option-card')
            this.updateCardAppearance(card, true)
          })

          // ラジオボタンの初期状態を反映
          document.querySelectorAll('.option-card input[type="radio"]:checked').forEach(radio => {
            const card = radio.closest('.option-card')
            this.updateCardAppearance(card, true)
          })
        }
      }

      // File Preview Controller
      class FilePreviewController extends Controller {
        static targets = ["imageInput", "videoInput", "audioInput", "mediaPreview"]

        connect() {
          console.log("File Preview Controller connected!")
          console.log("Media preview target:", this.hasMediaPreviewTarget)
        }

        previewFiles(event) {
          console.log("previewFiles called with event:", event)
          const files = event.target.files
          console.log("Selected files:", files)
          
          if (files.length === 0) {
            console.log("No files selected")
            return
          }

          // 各ファイルに対してプレビューを生成
          Array.from(files).forEach((file, index) => {
            console.log(`Processing file ${index + 1}:`, file.name, file.type)
            if (file.type.startsWith('image/')) {
              console.log("Creating image preview for:", file.name)
              this.createImagePreview(file, index, this.mediaPreviewTarget)
            } else if (file.type.startsWith('video/')) {
              console.log("Creating video preview for:", file.name)
              this.createVideoPreview(file, index, this.mediaPreviewTarget)
            } else if (file.type.startsWith('audio/')) {
              console.log("Creating audio preview for:", file.name)
              this.createAudioPreview(file, index, this.mediaPreviewTarget)
            }
          })
        }

        createImagePreview(file, index, container) {
          const reader = new FileReader()
          
          reader.onload = (e) => {
            const previewDiv = document.createElement('div')
            previewDiv.className = 'relative mb-6'
            
            const img = document.createElement('img')
            img.src = e.target.result
            img.className = 'w-full max-w-lg h-auto rounded-lg shadow-lg'
            img.alt = `プレビュー ${index + 1}`
            
            const removeBtn = document.createElement('button')
            removeBtn.type = 'button'
            removeBtn.className = 'absolute top-2 left-20 bg-red-500 text-white rounded-full w-8 h-8 flex items-center justify-center text-lg hover:bg-red-600 shadow-lg'
            removeBtn.innerHTML = '×'
            removeBtn.onclick = () => previewDiv.remove()
            
            const fileName = document.createElement('p')
            fileName.textContent = file.name
            fileName.className = 'text-sm text-gray-700 mt-3 font-medium'
            
            const fileSize = document.createElement('p')
            fileSize.textContent = `ファイルサイズ: ${(file.size / 1024 / 1024).toFixed(2)} MB`
            fileSize.className = 'text-xs text-gray-500'
            
            previewDiv.appendChild(img)
            previewDiv.appendChild(removeBtn)
            previewDiv.appendChild(fileName)
            previewDiv.appendChild(fileSize)
            container.appendChild(previewDiv)
          }
          
          reader.readAsDataURL(file)
        }

        createVideoPreview(file, index, container) {
          const previewDiv = document.createElement('div')
          previewDiv.className = 'relative mb-6'
          
          const video = document.createElement('video')
          video.src = URL.createObjectURL(file)
          video.className = 'w-full max-w-lg h-auto rounded-lg shadow-lg'
          video.controls = true
          video.preload = 'metadata'
          
          const removeBtn = document.createElement('button')
          removeBtn.type = 'button'
          removeBtn.className = 'absolute top-2 left-20 bg-red-500 text-white rounded-full w-8 h-8 flex items-center justify-center text-lg hover:bg-red-600 shadow-lg'
          removeBtn.innerHTML = '×'
          removeBtn.onclick = () => {
            URL.revokeObjectURL(video.src)
            previewDiv.remove()
          }
          
          const fileName = document.createElement('p')
          fileName.textContent = file.name
          fileName.className = 'text-sm text-gray-700 mt-3 font-medium'
          
          const fileSize = document.createElement('p')
          fileSize.textContent = `ファイルサイズ: ${(file.size / 1024 / 1024).toFixed(2)} MB`
          fileSize.className = 'text-xs text-gray-500'
          
          previewDiv.appendChild(video)
          previewDiv.appendChild(removeBtn)
          previewDiv.appendChild(fileName)
          previewDiv.appendChild(fileSize)
          container.appendChild(previewDiv)
        }

        createAudioPreview(file, index, container) {
          const previewDiv = document.createElement('div')
          previewDiv.className = 'relative mb-6 p-6 bg-gray-100 rounded-lg max-w-lg'
          
          const audioElement = document.createElement('audio')
          audioElement.src = URL.createObjectURL(file)
          audioElement.controls = true
          audioElement.className = 'w-full mb-4'
          
          const audioIcon = document.createElement('div')
          audioIcon.className = 'w-32 h-32 flex items-center justify-center bg-blue-100 rounded-lg mx-auto mb-4'
          audioIcon.innerHTML = '<svg class="w-16 h-16 text-blue-600" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M9.383 3.076A1 1 0 0110 4v12a1 1 0 01-1.707.707L4.586 13H2a1 1 0 01-1-1V8a1 1 0 011-1h2.586l3.707-3.707a1 1 0 011.09-.217zM15.657 6.343a1 1 0 011.414 0A9.972 9.972 0 0119 12a9.972 9.972 0 01-1.929 5.657 1 1 0 01-1.414-1.414A7.971 7.971 0 0017 12c0-2.21-.895-4.21-2.343-5.657a1 1 0 010-1.414zm-2.829 2.828a1 1 0 011.415 0A5.983 5.983 0 0115 12a5.983 5.983 0 01-.757 2.828 1 1 0 01-1.415-1.414A3.987 3.987 0 0013 12a3.987 3.987 0 00-.172-1.414 1 1 0 010-1.415z" clip-rule="evenodd"/></svg>'
          
          const removeBtn = document.createElement('button')
          removeBtn.type = 'button'
          removeBtn.className = 'absolute top-2 left-20 bg-red-500 text-white rounded-full w-8 h-8 flex items-center justify-center text-lg hover:bg-red-600 shadow-lg'
          removeBtn.innerHTML = '×'
          removeBtn.onclick = () => {
            URL.revokeObjectURL(audioElement.src)
            previewDiv.remove()
          }
          
          const fileName = document.createElement('p')
          fileName.textContent = file.name
          fileName.className = 'text-sm text-gray-700 font-medium text-center'
          
          const fileSize = document.createElement('p')
          fileSize.textContent = `ファイルサイズ: ${(file.size / 1024 / 1024).toFixed(2)} MB`
          fileSize.className = 'text-xs text-gray-500 text-center'
          
          previewDiv.appendChild(audioIcon)
          previewDiv.appendChild(audioElement)
          previewDiv.appendChild(removeBtn)
          previewDiv.appendChild(fileName)
          previewDiv.appendChild(fileSize)
          container.appendChild(previewDiv)
        }
      }

      // Register controllers
      application.register("image-test", ImageTestController)
      application.register("image-comments", ImageCommentsController)
      application.register("global-comment-pins", GlobalCommentPinsController)
      application.register("ai-comment-assistant", AiCommentAssistantController)
      application.register("compact-comments", CompactCommentsController)
      application.register("ai-sidebar", AiSidebarController)
      application.register("vote", VoteController)
      application.register("profile-wizard", ProfileWizardController)
      application.register("file-preview", FilePreviewController)
      
      // グローバルアクセス用
      window.application = application
      
      console.log("Stimulus application started and controllers registered!")
      
      // レスポンシブサイドバー機能
      document.addEventListener('DOMContentLoaded', function() {
        const hamburgerBtn = document.getElementById('hamburger-btn');
        const sidebar = document.getElementById('sidebar');
        const overlay = document.getElementById('overlay');
        
        console.log('Hamburger elements:', { hamburgerBtn, sidebar, overlay });
        
        if (hamburgerBtn && sidebar && overlay) {
          // ハンバーガーメニューボタンクリック
          hamburgerBtn.addEventListener('click', function() {
            console.log('Hamburger button clicked');
            sidebar.classList.toggle('show-mobile');
            overlay.classList.toggle('hidden');
            console.log('Sidebar classes:', sidebar.className);
            console.log('Overlay classes:', overlay.className);
          });
          
          // オーバーレイクリックでメニューを閉じる
          overlay.addEventListener('click', function() {
            console.log('Overlay clicked');
            sidebar.classList.remove('show-mobile');
            overlay.classList.add('hidden');
          });
          
          // ESCキーでメニューを閉じる
          document.addEventListener('keydown', function(event) {
            if (event.key === 'Escape') {
              console.log('Escape key pressed');
              sidebar.classList.remove('show-mobile');
              overlay.classList.add('hidden');
            }
          });
        } else {
          console.error('Missing elements for hamburger menu');
        }
      });
    </script>
  </head>

  <body class="bg-gray-100 text-gray-800">

    <!-- ハンバーガーメニューボタン（スマホのみ表示） -->
    <div class="md:hidden fixed top-4 right-4 z-50">
      <button id="hamburger-btn" class="bg-white p-2 rounded-md shadow-lg border">
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
        </svg>
      </button>
    </div>



    <!-- オーバーレイ（スマホのみ） -->
    <div id="overlay" class="fixed inset-0 bg-black bg-opacity-50 z-30 hidden md:hidden"></div>

    <div class="flex">
      <!-- サイドバー -->
      <div id="sidebar">
        <%= render 'layouts/sidebar' %>
      </div>

      <!-- メインコンテンツ -->

      <main id="main-content">
        <div class="max-w-6xl mx-auto">
        <% if notice %>
          <div class="bg-green-100 text-green-800 p-4 rounded mb-4"><%= notice %></div>
        <% end %>

        <% if alert %>
          <div class="bg-red-100 text-red-800 p-4 rounded mb-4"><%= alert %></div>
        <% end %>

        <%= yield %>
        </div>
      </main>
    </div>

    <!-- Bottom navigation for mobile -->
    <nav id="bottom-nav" class="md:hidden fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 z-50">
      <div class="grid grid-cols-5 h-20">
        <!-- Home -->
        <%= link_to root_path, class: "flex flex-col items-center justify-center py-1 mt-1 #{'text-blue-600' if request.path == root_path} #{'text-gray-600' if request.path != root_path} hover:text-blue-600 transition-colors" do %>
          <svg class="w-6 h-6 mb-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"></path>
          </svg>
          <span class="text-xs">ホーム</span>
        <% end %>
        
        <!-- Search -->
        <%= link_to search_path, class: "flex flex-col items-center justify-center py-1 mt-1 #{'text-blue-600' if request.path == search_path} #{'text-gray-600' if request.path != search_path} hover:text-blue-600 transition-colors" do %>
          <svg class="w-6 h-6 mb-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
          </svg>
          <span class="text-xs">検索</span>
        <% end %>
        
        <!-- New Post -->
        <%= link_to new_post_path, class: "flex flex-col items-center justify-center py-1 mt-1 #{'text-blue-600' if request.path == new_post_path} #{'text-gray-600' if request.path != new_post_path} hover:text-blue-600 transition-colors" do %>
          <svg class="w-6 h-6 mb-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
          </svg>
          <span class="text-xs">新規投稿</span>
        <% end %>
        
        <!-- Direct Messages -->
        <% if user_signed_in? %>
          <%= link_to rooms_path, class: "flex flex-col items-center justify-center py-1 mt-1 #{'text-blue-600' if request.path == rooms_path} #{'text-gray-600' if request.path != rooms_path} hover:text-blue-600 transition-colors" do %>
            <svg class="w-6 h-6 mb-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 4v-4z"></path>
            </svg>
            <span class="text-2xs">DM</span>
          <% end %>
        <% else %>
          <div class="flex flex-col items-center justify-center py-1 mt-1 text-gray-400">
            <svg class="w-6 h-6 mb-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 4v-4z"></path>
            </svg>
            <span class="text-2xs">DM</span>
          </div>
        <% end %>
        
        <!-- My Page -->
        <% if user_signed_in? %>
          <%= link_to mypage_path, class: "flex flex-col items-center justify-center py-1 mt-1 #{'text-blue-600' if request.path == mypage_path} #{'text-gray-600' if request.path != mypage_path} hover:text-blue-600 transition-colors" do %>
            <svg class="w-6 h-6 mb-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
            </svg>
            <span class="text-xs">マイページ</span>
          <% end %>
        <% else %>
          <%= link_to new_user_session_path, class: "flex flex-col items-center justify-center py-1 mt-1 text-gray-600 hover:text-blue-600 transition-colors" do %>
            <svg class="w-6 h-6 mb-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
            </svg>
            <span class="text-xs">ログイン</span>
          <% end %>
        <% end %>
      </div>
    </nav>

    <!-- Mobile comment pins toggle button (bottom-right) -->
    <div class="md:hidden fixed bottom-24 right-4 z-40" data-controller="global-comment-pins">
      <button type="button" 
              data-action="click->global-comment-pins#toggleGlobalPins"
              data-global-comment-pins-target="toggleButton"
              class="w-16 h-16 bg-emerald-300 text-white rounded-full shadow-xl hover:bg-emerald-400 transition-all duration-300 active:scale-95 flex items-center justify-center">
        <span data-global-comment-pins-target="toggleIcon" class="text-2xl">📍</span>
      </button>
    </div>


  </body>
</html>
