<!DOCTYPE html>
<html>
  <head>
    <title>アプリ名</title>
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>

    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    
    <!-- Application CSS をインライン埋め込み -->
    <style>
      .thumbnail {
          max-width: 200px;
          max-height: 200px;
          object-fit: cover;
          display: block;
        }

      /* LINE風チャットルームのスタイル */

      .chat-container {
        display: flex;
        flex-direction: column;
        height: 100vh;
        background-color: #79a2d1;
      }

      .chat-header {
        background-color: #3d4a5d;
        color: white;
        padding: 15px;
        text-align: center;
      }

      .chat-header h2 {
        margin: 0;
        font-size: 1.2em;
      }

      .chat-box {
        flex-grow: 1;
        overflow-y: auto;
        padding: 20px;
        display: flex;
        flex-direction: column;
      }

      .message-row {
        display: flex;
        margin-bottom: 15px;
      }

      .message-row.sent {
        justify-content: flex-end;
      }

      .message-row.received {
        justify-content: flex-start;
      }

      .message {
        max-width: 70%;
        display: flex;
        align-items: flex-end;
      }

      .message-body {
        padding: 10px 15px;
        border-radius: 20px;
        color: #333;
        word-wrap: break-word;
      }

      .sent .message-body {
        background-color: #8de055;
        color: black;
      }

      .received .message-body {
        background-color: #ffffff;
      }

      .message-time {
        font-size: 0.75em;
        color: #999;
        margin: 0 5px;
        white-space: nowrap;
      }

      .message-form-container {
        padding: 10px;
        background-color: #f0f0f0;
        border-top: 1px solid #ddd;
      }

      .message-form {
        display: flex;
        align-items: center;
      }

      .message-form textarea {
        flex-grow: 1;
        border-radius: 20px;
        border: 1px solid #ccc;
        padding: 10px 15px;
        resize: none;
        min-height: 20px;
        max-height: 100px;
        overflow-y: auto;
      }

      .send-button {
        background-color: #4CAF50;
        color: white;
        border: none;
        padding: 10px 15px;
        border-radius: 20px;
        margin-left: 10px;
        cursor: pointer;
      }

      .send-button:hover {
        background-color: #45a049;
      }
    </style>
    
    <!-- Stimulus JavaScript -->
    <script type="module">
      import { Application, Controller } from "https://unpkg.com/@hotwired/stimulus/dist/stimulus.js"
      
      const application = Application.start()
      
      // Image Test Controller
      class ImageTestController extends Controller {
        static targets = ["image"]
        
        connect() {
          console.log("Image Test Controller connected!")
        }

        imageClicked() {
          console.log("Image clicked via test controller!")
          alert("Image click detected!")
        }
      }
      
      // Image Comments Controller  
      class ImageCommentsController extends Controller {
        static targets = ["image", "form", "commentForm", "markersContainer", "toggleButton", "toggleIcon", "toggleText", "markerCount"]
        static values = { postId: Number, readOnly: Boolean }

        connect() {
          console.log("Image Comments Controller connected!")
          console.log("Post ID:", this.postIdValue)
          console.log("Read Only:", this.readOnlyValue)
          console.log("Available targets:", this.targets)
          console.log("Has toggleButton target:", this.hasToggleButtonTarget)
          
          // グローバル設定があれば初期状態はそれに従う、読み取り専用の場合
          if (this.readOnlyValue) {
            this.markersVisible = localStorage.getItem('globalCommentPinsVisible') === 'true'
          } else {
            this.markersVisible = false // 詳細ページでは従来通り
          }
          
          // 読み取り専用でない場合のみクリックリスナーを設定
          if (!this.readOnlyValue) {
            this.setupImageClickListener()
          }
          
          this.loadExistingComments()
          this.setupResizeListener()
          this.updateToggleButton()
          
          // グローバルピン切り替えイベントを監視（すべてのモードで）
          window.addEventListener('globalCommentPinsToggled', this.handleGlobalToggle.bind(this))
        }

        setupResizeListener() {
          // ウィンドウリサイズ時にマーカーの位置を再計算
          let resizeTimeout
          window.addEventListener('resize', () => {
            clearTimeout(resizeTimeout)
            resizeTimeout = setTimeout(() => {
              if (this.existingComments) {
                console.log("Recalculating marker positions after resize")
                this.renderComments(this.existingComments)
              }
            }, 150) // デバウンス処理
          })
        }

        setupImageClickListener() {
          console.log("Setting up image click listener...")
          if (!this.hasImageTarget) {
            console.error("Image target not found!")
            return
          }
          
          this.imageTarget.addEventListener("click", (event) => {
            console.log("Image clicked!")
            const rect = this.imageTarget.getBoundingClientRect()
            const x = event.clientX - rect.left
            const y = event.clientY - rect.top
            
            // 画像に対する相対的な位置（パーセンテージ）で保存
            const xPercent = (x / rect.width) * 100
            const yPercent = (y / rect.height) * 100
            
            console.log(`Click position: ${x}, ${y} (${xPercent.toFixed(2)}%, ${yPercent.toFixed(2)}%)`)
            
            this.hideForm()
            this.showFormAt(x, y, xPercent, yPercent)
          })
        }

        showFormAt(x, y, xPercent, yPercent) {
          console.log("Showing form at:", x, y, `(${xPercent}%, ${yPercent}%)`)
          if (!this.hasFormTarget) {
            console.error("Form target not found!")
            return
          }
          
          this.formTarget.style.left = x + "px"
          this.formTarget.style.top = y + "px"
          this.formTarget.classList.remove("hidden")
          console.log("Form should be visible now")
          
          // パーセンテージで位置を保存
          const xField = this.formTarget.querySelector("input[name='comment[x_position]']")
          const yField = this.formTarget.querySelector("input[name='comment[y_position]']")
          
          if (xField) xField.value = xPercent.toFixed(2)
          if (yField) yField.value = yPercent.toFixed(2)
          
          const textarea = this.formTarget.querySelector("textarea")
          if (textarea) {
            textarea.focus()
            textarea.value = ""
          }
        }

        hideForm() {
          if (this.hasFormTarget) {
            this.formTarget.classList.add("hidden")
          }
        }

        async loadExistingComments() {
          console.log("Loading existing comments...")
          
          try {
            const response = await fetch(`/posts/${this.postIdValue}/comments.json`)
            if (response.ok) {
              const comments = await response.json()
              const imageComments = comments.filter(comment => 
                comment.x_position !== null && comment.y_position !== null
              )
              console.log("Loaded image comments:", imageComments)
              this.existingComments = imageComments
              
              // 画像が読み込み完了してからコメントを描画
              if (this.hasImageTarget) {
                if (this.imageTarget.complete && this.imageTarget.naturalWidth > 0) {
                  this.renderComments(imageComments)
                } else {
                  this.imageTarget.addEventListener('load', () => {
                    this.renderComments(imageComments)
                  }, { once: true })
                  // フォールバック
                  setTimeout(() => {
                    this.renderComments(imageComments)
                  }, 200)
                }
              }
              
              // 読み取り専用モードで既存のコメントがある場合は初期状態でマーカーを表示
              if (this.readOnlyValue && imageComments.length > 0) {
                this.markersVisible = localStorage.getItem('globalCommentPinsVisible') === 'true'
              } else if (imageComments.length > 0) {
                this.markersVisible = true
              }
            } else {
              console.log("Could not load comments via API, using fallback")
              this.loadCommentsFromDOM()
            }
          } catch (error) {
            console.error("Error loading comments:", error)
            this.loadCommentsFromDOM()
          }
        }

        loadCommentsFromDOM() {
          // フォールバック: DOM要素から読み込み
          const commentElements = document.querySelectorAll('[data-comment-id]')
          const comments = []
          
          commentElements.forEach((element, index) => {
            const commentId = element.dataset.commentId
            const commentText = element.querySelector('p')?.textContent
            
            if (commentText && element.closest('.bg-blue-50')) {
              comments.push({
                id: commentId,
                body: commentText.trim(),
                x_position: 25 + (index * 10), // 仮の位置（パーセンテージ）
                y_position: 25 + (index * 5),
                number: index + 1
              })
            }
          })
          
          this.existingComments = comments
          this.renderComments(comments)
          
          // 既存のコメントがある場合は初期状態でマーカーを表示
          if (comments.length > 0) {
            this.markersVisible = true
          }
        }

        renderComments(comments) {
          if (!this.hasMarkersContainerTarget) {
            console.error("Markers container not found!")
            return
          }
          
          const container = this.markersContainerTarget
          container.innerHTML = "" // 既存のマーカーをクリア
          
          comments.forEach((comment, index) => {
            this.createMarker(comment, index + 1)
          })
          
          // マーカー表示状態を更新
          if (this.hasMarkersContainerTarget) {
            this.markersContainerTarget.style.display = this.markersVisible ? 'block' : 'none'
          }
          this.updateToggleButton()
        }

        createMarker(comment, number) {
          if (!this.hasImageTarget) {
            console.error("Image target not found for marker creation!")
            return
          }
          
          const marker = document.createElement("div")
          marker.className = "absolute w-8 h-8 bg-blue-500 text-white rounded-full flex items-center justify-center text-sm font-bold cursor-pointer z-10 transform -translate-x-1/2 -translate-y-1/2 transition-all duration-200 hover:scale-110"
          marker.textContent = number
          marker.dataset.commentId = comment.id
          marker.style.pointerEvents = "auto"
          
          // 画像が読み込み完了してからマーカーの位置を設定
          const positionMarker = () => {
            const imageRect = this.imageTarget.getBoundingClientRect()
            console.log(`Image rect for marker ${number}:`, imageRect.width, 'x', imageRect.height)
            
            // 画像サイズが0の場合は少し待ってから再試行
            if (imageRect.width === 0 || imageRect.height === 0) {
              console.log(`Image not ready for marker ${number}, retrying...`)
              setTimeout(positionMarker, 100)
              return
            }
            
            const xPixel = (comment.x_position / 100) * imageRect.width
            const yPixel = (comment.y_position / 100) * imageRect.height
            
            marker.style.left = `${xPixel}px`
            marker.style.top = `${yPixel}px`
            
            console.log(`Marker #${number} positioned at (${xPixel}, ${yPixel}) from (${comment.x_position}%, ${comment.y_position}%)`)
          }
          
          // 画像が既に読み込まれているかチェック
          if (this.imageTarget.complete && this.imageTarget.naturalWidth > 0) {
            positionMarker()
          } else {
            // 画像の読み込み完了を待つ
            this.imageTarget.addEventListener('load', positionMarker, { once: true })
            // 既に読み込み済みの場合のフォールバック
            setTimeout(positionMarker, 100)
          }
          
          // ツールチップ作成
          const tooltip = document.createElement("div")
          tooltip.className = "absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 bg-gray-800 text-white text-xs rounded py-1 px-2 whitespace-nowrap z-20 opacity-0 transition-opacity duration-200 pointer-events-none"
          tooltip.textContent = comment.body
          tooltip.style.maxWidth = "300px"
          tooltip.style.whiteSpace = "nowrap"
          tooltip.style.overflow = "hidden"
          tooltip.style.textOverflow = "ellipsis"
          
          // マーカーにツールチップを追加
          marker.appendChild(tooltip)
          
          // ホバーイベント
          marker.addEventListener("mouseenter", () => {
            tooltip.style.opacity = "1"
          })
          
          marker.addEventListener("mouseleave", () => {
            tooltip.style.opacity = "0"
          })
          
          // マーカーコンテナーに追加
          this.markersContainerTarget.appendChild(marker)
          console.log(`Created marker #${number} at (${comment.x_position}, ${comment.y_position})`)
        }

        async submitComment(event) {
          event.preventDefault()
          console.log("Submitting comment...")
          
          const form = event.target
          const formData = new FormData(form)
          
          try {
            const response = await fetch(form.action, {
              method: 'POST',
              body: formData,
              headers: {
                'Accept': 'application/json',
                'X-Requested-With': 'XMLHttpRequest',
                'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
              }
            })
            
            if (response.ok) {
              const comment = await response.json()
              console.log("Comment submitted successfully:", comment)
              
              // 新しいマーカーを追加
              const currentMarkersCount = this.markersContainerTarget.children.length
              this.createMarker(comment, currentMarkersCount + 1)
              
              // マーカーを表示状態に切り替え
              this.markersVisible = true
              if (this.hasMarkersContainerTarget) {
                this.markersContainerTarget.style.display = 'block'
              }
              this.updateToggleButton()
              
              // フォームを非表示にする
              this.hideForm()
              
              // 成功メッセージを表示
              this.showSuccessMessage()
              
              // 1秒後にページをリロードして通常のコメント一覧も更新
              setTimeout(() => {
                window.location.reload()
              }, 1000)
            } else {
              const errorData = await response.json()
              console.error('Comment submission failed:', errorData)
              alert('コメントの投稿に失敗しました。')
            }
          } catch (error) {
            console.error('Error submitting comment:', error)
            alert('エラーが発生しました。')
          }
        }

        showSuccessMessage() {
          const message = document.createElement('div')
          message.className = 'fixed top-4 right-4 bg-green-500 text-white px-4 py-2 rounded shadow-lg z-50'
          message.textContent = 'コメントを投稿しました！'
          document.body.appendChild(message)
          
          setTimeout(() => {
            message.remove()
          }, 3000)
        }

        toggleMarkers() {
          console.log("Toggling markers visibility")
          console.log("Current state:", this.markersVisible)
          console.log("Has markers container:", this.hasMarkersContainerTarget)
          
          this.markersVisible = !this.markersVisible
          console.log("New state:", this.markersVisible)
          
          if (this.hasMarkersContainerTarget) {
            const container = this.markersContainerTarget
            console.log("Container children count:", container.children.length)
            container.style.display = this.markersVisible ? 'block' : 'none'
            console.log("Container display set to:", container.style.display)
          }
          
          this.updateToggleButton()
          
          // 詳細ページで個別トグルを操作した場合、グローバル状態も更新
          if (!this.readOnlyValue) {
            localStorage.setItem('globalCommentPinsVisible', this.markersVisible)
            // グローバルコントローラーにも通知
            const globalController = document.querySelector('[data-controller*="global-comment-pins"]')
            if (globalController) {
              const controller = this.application.getControllerForElementAndIdentifier(globalController, 'global-comment-pins')
              if (controller) {
                controller.syncFromIndividual(this.markersVisible)
              }
            }
          }
        }

        updateToggleButton() {
          if (!this.hasToggleButtonTarget) return
          
          const button = this.toggleButtonTarget
          const icon = this.hasToggleIconTarget ? this.toggleIconTarget : null
          const text = this.hasToggleTextTarget ? this.toggleTextTarget : null
          const count = this.hasMarkerCountTarget ? this.markerCountTarget : null
          
          if (this.markersVisible) {
            // マーカー表示中の状態
            button.classList.remove('border-gray-300', 'hover:bg-gray-50')
            button.classList.add('border-blue-500', 'bg-blue-50', 'text-blue-700')
            if (icon) icon.textContent = '🙈'
            if (text) text.textContent = 'コメントピンを非表示'
          } else {
            // マーカー非表示中の状態
            button.classList.remove('border-blue-500', 'bg-blue-50', 'text-blue-700')
            button.classList.add('border-gray-300', 'hover:bg-gray-50')
            if (icon) icon.textContent = '👁️'
            if (text) text.textContent = 'コメントピンを表示'
          }
          
          // マーカー数を表示
          if (count && this.hasMarkersContainerTarget) {
            const markerCount = this.markersContainerTarget.children.length
            if (markerCount > 0) {
              count.textContent = `(${markerCount}件のコメント)`
            } else {
              count.textContent = ''
            }
          }
        }

        // グローバルピン切り替えイベントのハンドラー
        handleGlobalToggle(event) {
          console.log("Global toggle received:", event.detail.visible, "ReadOnly:", this.readOnlyValue)
          this.markersVisible = event.detail.visible
          if (this.hasMarkersContainerTarget) {
            this.markersContainerTarget.style.display = this.markersVisible ? 'block' : 'none'
          }
          this.updateToggleButton()
        }

        // グローバルコントローラーから呼び出される関数
        setGlobalMarkersVisibility(visible) {
          console.log("Setting global visibility:", visible, "ReadOnly:", this.readOnlyValue)
          this.markersVisible = visible
          if (this.hasMarkersContainerTarget) {
            this.markersContainerTarget.style.display = this.markersVisible ? 'block' : 'none'
          }
          this.updateToggleButton()
        }

        disconnect() {
          // イベントリスナーを削除（すべてのモードで）
          window.removeEventListener('globalCommentPinsToggled', this.handleGlobalToggle.bind(this))
        }
      }

      // Global Comment Pins Controller
      class GlobalCommentPinsController extends Controller {
        static targets = ["toggleButton", "toggleIcon", "toggleText"]

        connect() {
          console.log("Global Comment Pins Controller connected!")
          this.globalPinsVisible = localStorage.getItem('globalCommentPinsVisible') === 'true'
          this.updateButtonState()
          this.updateAllPins()
        }

        toggleGlobalPins() {
          console.log("Toggling global comment pins")
          this.globalPinsVisible = !this.globalPinsVisible
          localStorage.setItem('globalCommentPinsVisible', this.globalPinsVisible)
          
          this.updateButtonState()
          this.updateAllPins()
          
          // カスタムイベントを発火して他のコントローラーに通知
          window.dispatchEvent(new CustomEvent('globalCommentPinsToggled', {
            detail: { visible: this.globalPinsVisible }
          }))
        }

        updateButtonState() {
          if (!this.hasToggleButtonTarget) return
          
          const button = this.toggleButtonTarget
          const icon = this.hasToggleIconTarget ? this.toggleIconTarget : null
          const text = this.hasToggleTextTarget ? this.toggleTextTarget : null
          
          if (this.globalPinsVisible) {
            button.classList.remove('border-gray-300', 'hover:bg-gray-50')
            button.classList.add('border-blue-500', 'bg-blue-50', 'text-blue-700')
            if (icon) icon.textContent = '🙈'
            if (text) text.textContent = 'コメントピン一括非表示'
          } else {
            button.classList.remove('border-blue-500', 'bg-blue-50', 'text-blue-700')
            button.classList.add('border-gray-300', 'hover:bg-gray-50')
            if (icon) icon.textContent = '👁️'
            if (text) text.textContent = 'コメントピン一括表示'
          }
        }

        updateAllPins() {
          // すべてのimage-commentsコントローラーのマーカーの表示状態を更新
          const imageCommentsElements = document.querySelectorAll('[data-controller*="image-comments"]')
          imageCommentsElements.forEach(element => {
            const controller = this.application.getControllerForElementAndIdentifier(element, 'image-comments')
            if (controller) {
              controller.setGlobalMarkersVisibility(this.globalPinsVisible)
            }
          })
        }

        // 個別コントローラーからの同期
        syncFromIndividual(visible) {
          this.globalPinsVisible = visible
          this.updateButtonState()
        }
      }
      
      // Register controllers
      application.register("image-test", ImageTestController)
      application.register("image-comments", ImageCommentsController)
      application.register("global-comment-pins", GlobalCommentPinsController)
      
      // グローバルアクセス用
      window.application = application
      
      console.log("Stimulus application started and controllers registered!")
    </script>
  </head>

  <body class="bg-gray-100 text-gray-800">
    <div class="flex">
      <!-- サイドバー -->
      <%= render 'layouts/sidebar' %>

      <!-- メインコンテンツ -->
      <main class="flex-1 p-8 ml-64">
        <% if notice %>
          <div class="bg-green-100 text-green-800 p-4 rounded mb-4"><%= notice %></div>
        <% end %>

        <% if alert %>
          <div class="bg-red-100 text-red-800 p-4 rounded mb-4"><%= alert %></div>
        <% end %>

        <%= yield %>
      </main>
    </div>
  </body>
</html>