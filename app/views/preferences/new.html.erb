<h1>Preferences#new</h1>
<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>好み選択</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/matter-js/0.19.0/matter.min.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        html, body {
            height: 100%; /* Ensure html and body take full height */
            margin: 0;
            overflow: hidden; /* Prevent scrollbars on body/html */
        }
        body {
            font-family: 'Inter', sans-serif;
            display: flex;
            flex-direction: column;
            background-color: #f0f0f0; /* 背景色 */
        }
        #header {
            background-color: #333;
            color: white;
            padding: 15px;
            text-align: center;
            font-size: 1.5em;
            border-bottom-left-radius: 8px;
            border-bottom-right-radius: 8px;
            flex-shrink: 0;
        }
        #matter-container-wrapper {
            flex-grow: 1;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 15px; /* Reduced padding slightly */
            position: relative;
            min-height: 0; /* Crucial for flex-grow to work in a fixed height parent */
            overflow: hidden; /* Prevent its own scrollbars if content overflows temporarily */
        }
        #matter-container {
            width: 100%; /* Take full width of wrapper */
            max-width: 800px;
            height: 100%; /* Take full height of wrapper */
            background-color: #ffffff;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            position: relative;
            overflow: hidden; /* Matter.js canvas should not overflow this */
        }
        canvas {
            display: block;
            border-radius: 8px;
        }
        #selected-items-bar {
            background-color: #4A5568; /* Tailwindのgray-700 */
            color: white;
            padding: 10px 15px; /* Adjusted padding */
            text-align: center;
            max-height: 120px; /* Adjusted max-height */
            border-top-left-radius: 8px;
            border-top-right-radius: 8px;
            box-shadow: 0 -2px 8px rgba(0,0,0,0.1);
            flex-shrink: 0;
            overflow-y: auto; /* Enable vertical scroll if content exceeds max-height */
        }
        #selected-items-bar h3 {
            margin: 0 0 8px 0; /* Adjusted margin */
            font-size: 1.0em; /* Adjusted font size */
        }
        .selected-item-tag {
            display: inline-block;
            background-color: #63B3ED; /* Tailwindのblue-400 */
            color: white;
            padding: 4px 8px; /* Adjusted padding */
            margin: 3px; /* Adjusted margin */
            border-radius: 12px; /* Adjusted border-radius */
            font-size: 0.85em; /* Adjusted font size */
        }
        #reset-button-container {
            position: absolute;
            top: 8px;
            right: 8px;
            z-index: 1000;
        }
        #reset-button {
            background-color: #EF4444; /* Tailwindのred-500 */
            color: white;
            padding: 7px 14px; /* Adjusted padding */
            border: none;
            border-radius: 18px; /* Adjusted border-radius */
            cursor: pointer;
            font-size: 0.85em; /* Adjusted font size */
            box-shadow: 0 2px 4px rgba(0,0,0,0.2);
            transition: background-color 0.3s ease;
        }
        #reset-button:hover {
            background-color: #DC2626; /* Tailwindのred-600 */
        }

        @media (max-width: 640px) {
            #header {
                font-size: 1.2em;
                padding: 10px;
            }
            #matter-container-wrapper {
                padding: 10px;
            }
            #selected-items-bar {
                max-height: 100px; /* Max height for mobile */
                padding: 8px 10px;
            }
            #selected-items-bar h3 {
                font-size: 0.9em;
            }
            .selected-item-tag {
                padding: 3px 6px;
                font-size: 0.75em;
            }
            #reset-button {
                padding: 6px 12px;
                font-size: 0.75em;
            }
        }
    </style>
</head>
<body>

    <div id="header" class="rounded-b-lg">
        あなたの好みを教えてください
    </div>

    <div id="matter-container-wrapper">
        <div id="matter-container">
            </div>
        <div id="reset-button-container">
            <button id="reset-button">最初から</button>
        </div>
    </div>

    <div id="selected-items-bar" class="rounded-t-lg">
        <h3>選択中の好み:</h3>
        <div id="selected-items-display">
            </div>
    </div>
    <!-- 選択内容を送信するフォーム -->
<%= form_with model: @preference, url: preferences_path, local: true do |f| %>
  <%= hidden_field_tag :authenticity_token, form_authenticity_token %>

  <%= f.hidden_field :genre, id: "genre_field" %>
  <%= f.hidden_field :instrument_experience, id: "instrument_field" %>
  <%= f.hidden_field :favorite_artist, id: "artist_field" %>
  <%= f.hidden_field :career, id: "career_field" %>

  <%= f.submit "好みを送信して次へ", class: "mt-4 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600" %>
<% end %>


    

    <script>
        // Matter.jsのモジュール
        const { Engine, Render, Runner, World, Bodies, Composite, Events, Mouse, MouseConstraint, Body } = Matter;

        // DOM要素
        const matterContainer = document.getElementById('matter-container');
        const selectedItemsDisplay = document.getElementById('selected-items-display');
        const resetButton = document.getElementById('reset-button');

        // 好みのデータ構造 (創作者向けタグ拡充版)
        const preferencesData = {
            "音楽": {
                color: "#3B82F6", // blue-500
                subCategories: {
                    "ロック": { examples: ["レッド・ツェッペリン", "ONE OK ROCK", "Queen", "Nirvana", "King Gnu", "結束バンド"], color: "#10B981" },
                    "ポップ": { examples: ["マイケル・ジャクソン", "テイラー・スウィフト", "BTS", "YOASOBI", "Official髭男dism", "星野源"], color: "#06B6D4" },
                    "EDM": { examples: ["Avicii", "Marshmello", "The Chainsmokers", "Calvin Harris", "Skrillex", "Madeon"], color: "#10B981" },
                    "クラシック": { examples: ["モーツァルト", "ベートーヴェン", "バッハ", "ショパン", "久石譲", "坂本龍一"], color: "#06B6D4" },
                    "ジャズ": { examples: ["マイルス・デイヴィス", "ルイ・アームストロング", "ビル・エヴァンス", "上原ひろみ", "カマシ・ワシントン"], color: "#10B981" },
                    "ヒップホップ": { examples: ["Eminem", "Kendrick Lamar", "Creepy Nuts", "Awich", "舐達麻"], color: "#06B6D4"},
                    "作詞・作曲": { examples: ["メロディ制作", "作詞", "DTM", "編曲", "ボカロP"], color: "#F59E0B"} // amber-500
                }
            },
            "踊り": {
                color: "#EC4899", // pink-500
                subCategories: {
                    "ストリート": { examples: ["ヒップホップダンス", "ブレイキン", "ポッピン", "ロッキン", "ハウスダンス"], color: "#F59E0B" },
                    "バレエ": { examples: ["白鳥の湖", "くるみ割り人形", "ドン・キホーテ", "コンテンポラリーバレエ"], color: "#F97316" },
                    "コンテンポラリー": { examples: ["ピナ・バウシュ", "マース・カニングハム", "Noism", "インプロビゼーション"], color: "#F59E0B" },
                    "社交ダンス": { examples: ["ワルツ", "タンゴ", "ルンバ", "競技ダンス"], color: "#F97316" },
                    "振付": { examples: ["作品創作", "ムーブメント研究", "演出"], color: "#F59E0B"}
                }
            },
            "絵画": {
                color: "#8B5CF6", // violet-500
                subCategories: {
                    "油絵": { examples: ["ゴッホ", "モネ", "フェルメール", "古典技法", "厚塗り"], color: "#6366F1" },
                    "水彩画": { examples: ["ターナー", "サージェント", "透明水彩", "ガッシュ"], color: "#4F46E5" },
                    "日本画": { examples: ["葛飾北斎", "伊藤若冲", "岩絵具", "琳派"], color: "#6366F1" },
                    "現代アート": { examples: ["バンクシー", "草間彌生", "コンセプチュアルアート"], color: "#4F46E5" },
                    "デジタルペイント": { examples: ["Photoshop", "Clip Studio Paint", "Procreate", "厚塗りアニメ塗り"], color: "#6366F1"},
                    "イラストレーション": { examples: ["キャラクターデザイン", "背景美術", "挿絵", "絵本制作"], color: "#4F46E5"},
                    "版画": { examples: ["木版画", "銅版画 (エッチング)", "リトグラフ", "シルクスクリーン"], color: "#6366F1"}
                }
            },
            "3Dアート": {
                color: "#0EA5E9", // sky-500
                subCategories: {
                    "モデリング": { examples: ["キャラクター", "背景", "ハードサーフェス", "ローポリ"], color: "#22D3EE" },
                    "アニメーション": { examples: ["ピクサー作品", "Blender", "Maya", "キーフレーム"], color: "#0DD9D9" },
                    "VFX": { examples: ["Houdini", "Nuke", "コンポジット", "パーティクル"], color: "#22D3EE" },
                    "VR/ARコンテンツ制作": { examples: ["Unity", "Unreal Engine", "VR Chatワールド", "ARフィルター開発"], color: "#0DD9D9" },
                    "スカルプティング": { examples: ["ZBrush", "Blender Sculpt Mode", "キャラクター原型", "クリーチャーデザイン"], color: "#22D3EE"},
                    "テクスチャリング": { examples: ["Substance Painter", "PBRマテリアル", "UV展開", "プロシージャル"], color: "#0DD9D9"}
                }
            },
            "デザイン": {
                color: "#D97706", // amber-600
                subCategories: {
                    "グラフィック": { examples: ["ロゴ", "ポスター", "エディトリアル", "タイポグラフィ"], color: "#FBBF24" },
                    "ファッション": { examples: ["シャネル", "ヨウジヤマモト", "パターン作成", "縫製"], color: "#FACC15" },
                    "工業デザイン": { examples: ["Apple製品", "自動車", "CAD", "3Dプリンティング"], color: "#FBBF24" },
                    "建築": { examples: ["安藤忠雄", "ザハ・ハディド", "模型製作", "BIM"], color: "#FACC15" },
                    "UI/UXデザイン": { examples: ["Figma", "Adobe XD", "ワイヤーフレーム", "ユーザビリティテスト"], color: "#FBBF24"},
                    "モーショングラフィックス": { examples: ["After Effects", "Cinema 4D", "映像OP/ED制作", "インフォグラフィック動画"], color: "#FACC15"},
                    "インスタレーションアート": { examples: ["空間演出", "プロジェクションマッピング", "インタラクティブアート", "メディアアート"], color: "#FBBF24"}
                }
            },
            "演劇": {
                color: "#EF4444", // red-500
                subCategories: {
                    "ミュージカル": { examples: ["オペラ座の怪人", "レ・ミゼラブル", "劇団四季", "作曲・脚本"], color: "#F87171" },
                    "ストレートプレイ": { examples: ["シェイクスピア", "現代劇", "戯曲執筆", "演出"], color: "#FB7185" },
                    "歌舞伎": { examples: ["勧進帳", "義経千本桜", "女形", "立役"], color: "#F87171" },
                    "舞台美術・衣装": { examples: ["セットデザイン", "小道具製作", "衣装デザイン", "照明プラン"], color: "#FB7185"}
                }
            },
            "映画・映像": { // カテゴリ名変更
                color: "#14B8A6", // teal-500
                subCategories: {
                    "アクション": { examples: ["ミッション:インポッシブル", "マッドマックス", "殺陣・スタント"], color: "#0D9488" },
                    "コメディ": { examples: ["天使にラブソングを", "テッド", "脚本執筆"], color: "#0F766E" },
                    "SF・ファンタジー": { examples: ["ブレードランナー", "インターステラー", "世界観構築"], color: "#0D9488" },
                    "ドラマ": { examples: ["ショーシャンクの空に", "フォレスト・ガンプ", "キャラクター描写"], color: "#0F766E" },
                    "アニメ制作": { examples: ["君の名は。", "作画", "背景美術", "撮影・編集"], color: "#0D9488" },
                    "撮影・編集技術": { examples: ["カメラワーク", "照明技術", "Premiere Pro", "DaVinci Resolve"], color: "#0F766E"}
                }
            },
            "ゲーム制作": { // カテゴリ名変更
                color: "#65A30D", // lime-600
                subCategories: {
                    "RPG": { examples: ["ファイナルファンタジー", "シナリオライティング", "レベルデザイン"], color: "#4D7C0F" },
                    "アクション": { examples: ["モンスターハンター", "ゲームバランス調整", "エフェクトデザイン"], color: "#3F6212" },
                    "パズル": { examples: ["テトリス", "ギミック考案", "UIデザイン"], color: "#4D7C0F" },
                    "ストラテジー": { examples: ["信長の野望", "AIプログラミング", "システム設計"], color: "#3F6212" },
                    "インディーゲーム開発": { examples: ["Undertale", "Unity/Unreal Engine", "ドット絵制作", "サウンド制作"], color: "#4D7C0F" },
                    "ゲーム音楽・効果音": { examples: ["BGM作曲", "効果音作成", "Wwise/FMOD"], color: "#3F6212"}
                }
            },
            "工芸": {
                color: "#A16207", // yellow-700
                subCategories: {
                    "陶芸": { examples: ["手びねり", "ろくろ", "釉薬研究", "窯焼き"], color: "#854D0E" }, // yellow-800
                    "木工": { examples: ["家具製作", "彫刻", "指物", "旋盤"], color: "#713F12" }, // yellow-900
                    "染織": { examples: ["友禅染", "絞り染め", "機織り", "テキスタイルデザイン"], color: "#854D0E" },
                    "金工": { examples: ["彫金", "鍛金", "鋳金", "アクセサリー制作"], color: "#713F12" },
                    "ガラス工芸": { examples: ["吹きガラス", "ステンドグラス", "バーナーワーク"], color: "#854D0E"}
                }
            },
             "文芸・執筆": {
                color: "#57534E", // stone-600
                subCategories: {
                    "小説": { examples: ["純文学", "エンタメ小説", "SF", "ミステリー", "プロット構成"], color: "#44403C" }, // stone-700
                    "詩・短歌・俳句": { examples: ["現代詩", "自由律俳句", "短歌結社", "言葉選び"], color: "#3B3835" }, // stone-800 (custom)
                    "脚本・シナリオ": { examples: ["映画脚本", "ドラマ脚本", "舞台戯曲", "構成術"], color: "#44403C" },
                    "エッセイ・コラム": { examples: ["体験談", "書評", "取材記事", "ブログ運営"], color: "#3B3835" },
                    "翻訳": { examples: ["文芸翻訳", "産業翻訳", "字幕翻訳", "異文化理解"], color: "#44403C"}
                }
            }
        };

        let engine, render, runner, world;
        let currentLevel = 'major';
        let currentMajorCategory = null;
        let currentSubCategory = null;
        let selectedItems = [];
        let mouseConstraint;


        function initMatter() {
            engine = Engine.create();
            world = engine.world;
            world.gravity.y = 0.7; // 重力を少し強く

            const containerWidth = matterContainer.clientWidth;
            const containerHeight = matterContainer.clientHeight;

            render = Render.create({
                element: matterContainer,
                engine: engine,
                options: {
                    width: containerWidth,
                    height: containerHeight,
                    wireframes: false,
                    background: '#ffffff'
                }
            });

            Render.run(render);
            runner = Runner.create();
            Runner.run(runner, engine);

            createWalls(containerWidth, containerHeight);
            setupMouseInteraction();
        }

        function createWalls(width, height) {
            const wallThickness = 60;
            World.add(world, [
                Bodies.rectangle(width / 2, height + wallThickness / 2, width + wallThickness*2 , wallThickness, { isStatic: true, render: { fillStyle: '#E5E7EB' } }),
                Bodies.rectangle(-wallThickness / 2, height / 2, wallThickness, height*2, { isStatic: true, render: { fillStyle: '#E5E7EB' } }),
                Bodies.rectangle(width + wallThickness / 2, height / 2, wallThickness, height*2, { isStatic: true, render: { fillStyle: '#E5E7EB' } })
            ]);
        }

        function setupMouseInteraction() {
            const mouse = Mouse.create(render.canvas);
            mouseConstraint = MouseConstraint.create(engine, {
                mouse: mouse,
                constraint: {
                    stiffness: 0.1, // ドラッグ時の硬さ
                    render: { visible: false }
                }
            });

            World.add(world, mouseConstraint);

            // クリックイベントを mousedown で処理するように変更
            Events.on(mouseConstraint, 'mousedown', (event) => {
                // クリックがキャンバス上で発生したか確認
                if (event.mouse.sourceEvents.mousedown && event.mouse.sourceEvents.mousedown.target === render.canvas) {
                    const mousePosition = event.mouse.position;
                    const bodies = Matter.Query.point(Composite.allBodies(world), mousePosition);

                    if (bodies.length > 0) {
                        const clickedBody = bodies[0]; // 最も手前にあるボディを取得
                        if (clickedBody && !clickedBody.isStatic && clickedBody.customData) {
                            handleElementClick(clickedBody);
                        }
                    }
                }
            });
            
            Events.on(render, 'afterRender', () => {
                const context = render.context;
                const bodies = Composite.allBodies(world);
                context.font = 'bold 13px Arial';
                context.textBaseline = 'middle';
                context.textAlign = 'center';

                for (let i = 0; i < bodies.length; i++) {
                    const body = bodies[i];
                    if (body.isStatic || !body.customData) continue;
                    
                    const bodyColor = body.render.fillStyle;
                    const r = parseInt(bodyColor.substring(1,3),16);
                    const g = parseInt(bodyColor.substring(3,5),16);
                    const b = parseInt(bodyColor.substring(5,7),16);
                    const luminance = (0.299 * r + 0.587 * g + 0.114 * b) / 255;
                    
                    context.fillStyle = luminance > 0.5 ? 'black' : 'white';

                    const maxTextWidth = body.customData.width * 0.85;
                    const lines = [];
                    let currentLine = "";
                    const words = body.customData.name.split(' ');
                    
                    for(let word of words) {
                        const testLine = currentLine ? currentLine + " " + word : word;
                        if (context.measureText(testLine).width > maxTextWidth && currentLine) {
                            lines.push(currentLine);
                            currentLine = word;
                        } else {
                            currentLine = testLine;
                        }
                    }
                    lines.push(currentLine);

                    const lineHeight = 14;
                    const totalTextHeight = lines.length * lineHeight;
                    let startY = body.position.y - (totalTextHeight / 2) + (lineHeight / 2);

                    if (lines.length === 1 && context.measureText(lines[0]).width > body.customData.width * 0.9) {
                         context.font = 'bold 11px Arial';
                         if (context.measureText(lines[0]).width > body.customData.width * 0.9) {
                            let truncatedText = lines[0];
                            while(context.measureText(truncatedText + "...").width > body.customData.width * 0.9 && truncatedText.length > 0) {
                                truncatedText = truncatedText.slice(0, -1);
                            }
                            lines[0] = truncatedText + (lines[0].length > truncatedText.length ? "..." : "");
                         }
                         context.fillText(lines[0], body.position.x, body.position.y);
                         context.font = 'bold 13px Arial';
                    } else {
                        for (const line of lines) {
                            context.fillText(line, body.position.x, startY);
                            startY += lineHeight;
                        }
                    }
                }
            });
        }
        
        function getTextWidth(text, font) {
            const canvas = document.createElement("canvas");
            const context = canvas.getContext("2d");
            context.font = font;
            return context.measureText(text).width;
        }

        function createElementBody(text, x, y, itemData, type, majorCategory = null, subCategory = null) {
            const textMeasures = getTextWidth(text, 'bold 13px Arial');
            const padding = 20; 
            let bodyWidth = Math.max(80, Math.min(180, textMeasures + padding * 2));
            const bodyHeight = 45; 
            
            if (type === 'example' && text.length > 10) {
                 bodyWidth = Math.max(100, Math.min(220, textMeasures + padding * 1.5));
            }
             if (text.length > 15) {
                bodyWidth = Math.max(120, Math.min(240, textMeasures + padding));
            }

            const body = Bodies.rectangle(x, y, bodyWidth, bodyHeight, {
                restitution: 0.2,
                friction: 0.7,
                render: {
                    fillStyle: itemData.color || '#A5B4FC',
                    strokeStyle: '#4338CA', 
                    lineWidth: 1.5
                },
                customData: {
                    name: text,
                    type: type,
                    originalData: itemData,
                    majorCategory: majorCategory,
                    subCategory: subCategory,
                    id: `${type}-${text}-${majorCategory || ''}-${subCategory || ''}`,
                    width: bodyWidth
                },
                chamfer: { radius: 22 } // より丸みを帯びた形状
            });
            return body;
        }

        function findExistingBody(name, type, majorCategory = null, subCategory = null) {
            return Composite.allBodies(world).find(b => {
                if (b.isStatic || !b.customData) return false;
                if (b.customData.name === name && b.customData.type === type) {
                    if (type === 'major') return true;
                    if (type === 'sub') return b.customData.majorCategory === majorCategory;
                    if (type === 'example') return b.customData.majorCategory === majorCategory && b.customData.subCategory === subCategory;
                }
                return false;
            });
        }
        
        function displayInitialMajorCategories() {
            currentLevel = 'major';
            const containerWidth = matterContainer.clientWidth;
            const majorCategoryNames = Object.keys(preferencesData);
            majorCategoryNames.forEach((name, index) => {
                if (!findExistingBody(name, 'major')) {
                    const x = Math.random() * (containerWidth - 120) + 60;
                    const y = -30 - (index * 50) - (Math.random() * 80);
                    const body = createElementBody(name, x, y, preferencesData[name], 'major');
                    World.add(world, body);
                }
            });
        }

        function displayMajorCategoriesFocus() {
            const bodiesToRemove = Composite.allBodies(world).filter(b => 
                !b.isStatic && (b.customData.type === 'sub' || b.customData.type === 'example')
            );
            World.remove(world, bodiesToRemove);
            currentLevel = 'major';
        }

        function displaySubCategoriesAndPreserveOthers(majorCategoryName, isGoingBack = false) {
            const bodiesToRemove = Composite.allBodies(world).filter(b => {
                if (b.isStatic) return false;
                if (b.customData.type === 'example') return true;
                if (b.customData.type === 'sub' && b.customData.majorCategory !== majorCategoryName) return true;
                return false;
            });
            World.remove(world, bodiesToRemove);

            const subCategories = preferencesData[majorCategoryName].subCategories;
            const subCategoryNames = Object.keys(subCategories);
            const containerWidth = matterContainer.clientWidth;

            subCategoryNames.forEach((name, index) => {
                if (!findExistingBody(name, 'sub', majorCategoryName)) {
                    const x = Math.random() * (containerWidth - 120) + 60;
                    const y = -30 - (index * 50) - (Math.random() * 80);
                    const body = createElementBody(name, x, y, subCategories[name], 'sub', majorCategoryName);
                    World.add(world, body);
                }
            });
            currentLevel = 'sub';
        }

        function displayExamplesAndPreserveOthers(majorCatName, subCategoryName) {
            const bodiesToRemove = Composite.allBodies(world).filter(b => {
                if (b.isStatic) return false;
                if (b.customData.type === 'example' && (b.customData.majorCategory !== majorCatName || b.customData.subCategory !== subCategoryName)) return true;
                return false;
            });
            World.remove(world, bodiesToRemove);

            const examples = preferencesData[majorCatName].subCategories[subCategoryName].examples;
            const exampleColor = preferencesData[majorCatName].subCategories[subCategoryName].color;
            const containerWidth = matterContainer.clientWidth;

            examples.forEach((name, index) => {
                 if (!findExistingBody(name, 'example', majorCatName, subCategoryName)) {
                    const x = Math.random() * (containerWidth - 120) + 60;
                    const y = -30 - (index * 50) - (Math.random() * 80);
                    const body = createElementBody(name, x, y, { name: name, color: exampleColor || "#FCA5A5" }, 'example', majorCatName, subCategoryName);
                    World.add(world, body);
                }
            });
            currentLevel = 'example';
        }
        
        function removeItemAndItsChildrenFromSelected(itemName, itemType) {
            let itemsToKeep = [];
            if (itemType === 'major') {
                const majorData = preferencesData[itemName];
                itemsToKeep = selectedItems.filter(sel => {
                    if (sel === itemName) return false;
                    if (majorData && majorData.subCategories) {
                        for (const subKey in majorData.subCategories) {
                            if (sel === subKey) return false;
                            const subCatData = majorData.subCategories[subKey];
                            if (subCatData.examples && subCatData.examples.includes(sel)) return false;
                        }
                    }
                    return true;
                });
            } else if (itemType === 'sub' && currentMajorCategory) {
                const subData = preferencesData[currentMajorCategory]?.subCategories[itemName];
                itemsToKeep = selectedItems.filter(sel => {
                    if (sel === itemName) return false;
                    if (subData && subData.examples && subData.examples.includes(sel)) return false;
                    return true;
                });
            } else if (itemType === 'example') {
                 itemsToKeep = selectedItems.filter(sel => sel !== itemName);
            } else {
                itemsToKeep = [...selectedItems];
            }
            selectedItems = itemsToKeep;
        }

        function handleElementClick(bodyComponent) {
            const data = bodyComponent.customData;
            if (!data) return;

            const itemName = data.name;

            if (data.type === 'major') {
                if (currentMajorCategory === itemName) {
                    removeItemAndItsChildrenFromSelected(itemName, 'major');
                    currentMajorCategory = null;
                    currentSubCategory = null;
                    displayMajorCategoriesFocus();
                } else {
                    if (!selectedItems.includes(itemName)) selectedItems.push(itemName);
                    currentMajorCategory = itemName;
                    currentSubCategory = null;
                    displaySubCategoriesAndPreserveOthers(itemName);
                }
            } else if (data.type === 'sub') {
                if (currentSubCategory === itemName) {
                    removeItemAndItsChildrenFromSelected(itemName, 'sub');
                    currentSubCategory = null;
                    displaySubCategoriesAndPreserveOthers(currentMajorCategory, true);
                } else {
                    if (!selectedItems.includes(itemName)) selectedItems.push(itemName);
                    currentSubCategory = itemName;
                    displayExamplesAndPreserveOthers(currentMajorCategory, itemName);
                }
            } else if (data.type === 'example') {
                const index = selectedItems.indexOf(itemName);
                if (index > -1) {
                    selectedItems.splice(index, 1);
                    Body.set(bodyComponent, "render", {...bodyComponent.render, fillStyle: data.originalData.color || '#FCA5A5'});
                } else {
                    selectedItems.push(itemName);
                    // Optional: Visual feedback for selection
                    // Body.set(bodyComponent, "render", {...bodyComponent.render, fillStyle: '#FFD700'});
                }
            }
            updateSelectedItemsDisplay();

            // クリック処理後、マウスの制御からボディを解放する
            // これにより、クリック後に要素がマウスに「ひっつく」のを防ぐ
            if (mouseConstraint.mouse.button === 0) { // 左クリックの場合のみ
                mouseConstraint.body = null;
            }
        }

        function updateSelectedItemsDisplay() {
            selectedItemsDisplay.innerHTML = '';
            const uniqueSelectedItems = [...new Set(selectedItems)];
            uniqueSelectedItems.forEach(item => {
                const tag = document.createElement('span');
                tag.className = 'selected-item-tag';
                tag.textContent = item;
                selectedItemsDisplay.appendChild(tag);
            });
        }
        
        function resetSelection() {
            selectedItems = [];
            updateSelectedItemsDisplay();
            currentMajorCategory = null;
            currentSubCategory = null;
            currentLevel = 'major';

            const bodiesToRemove = Composite.allBodies(world).filter(body => !body.isStatic);
            World.remove(world, bodiesToRemove);
            
            displayInitialMajorCategories();
        }

        window.onload = () => {
            initMatter();
            displayInitialMajorCategories();
            resetButton.addEventListener('click', resetSelection);
        };
        
        let resizeTimeout;
        window.onresize = () => {
            clearTimeout(resizeTimeout);
            resizeTimeout = setTimeout(() => {
                if (render && matterContainer && engine && world && runner) {
                    Render.stop(render);
                    Runner.stop(runner);
                    World.clear(world, false); 
                    Engine.clear(engine);
                    
                    while (matterContainer.firstChild) {
                        matterContainer.removeChild(matterContainer.firstChild);
                    }

                    initMatter();
                    
                    displayInitialMajorCategories();

                    if (currentMajorCategory) {
                        displaySubCategoriesAndPreserveOthers(currentMajorCategory);
                        if (currentSubCategory) {
                           displayExamplesAndPreserveOthers(currentMajorCategory, currentSubCategory);
                        }
                    }
                    updateSelectedItemsDisplay();
                }
            }, 250);
        };

        // フォーム送信時に選ばれた項目を hidden フィールドにセット
        document.querySelector('form').addEventListener('submit', function(e) {
        const field = document.getElementById('selected_items_field');
        field.value = JSON.stringify(selectedItems); // 例: ["ロック", "君の名は。"]
        });
    </script>
</body>
</html>
