<!DOCTYPE html>
<html>
  <head>
    <title>アプリ名</title>
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>

    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    
    <!-- Application CSS をインライン埋め込み -->
    <style>
      .thumbnail {
          max-width: 200px;
          max-height: 200px;
          object-fit: cover;
          display: block;
        }

      /* コンパクトコメントハイライト用スタイル */
      .compact-comment-highlight {
        background-color: #fef3c7 !important;
        border-color: #f59e0b !important;
        box-shadow: 0 0 20px rgba(245, 158, 11, 0.3) !important;
        transform: scale(1.02);
        transition: all 0.3s ease-in-out;
      }

      /* line-clamp-2 utility for text truncation */
      .line-clamp-2 {
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
      }

      /* レスポンシブ調整 */
      @media (max-width: 1279px) {
        .xl\\:col-span-6 {
          grid-column: span 12 / span 12;
        }
        .xl\\:col-span-3 {
          grid-column: span 12 / span 12;
        }
      }


      /* LINE風チャットルームのスタイル */

      .chat-container {
        display: flex;
        flex-direction: column;
        height: 100vh;
        background-color: #79a2d1;
      }

      .chat-header {
        background-color: #3d4a5d;
        color: white;
        padding: 15px;
        text-align: center;
      }

      .chat-header h2 {
        margin: 0;
        font-size: 1.2em;
      }

      .chat-box {
        flex-grow: 1;
        overflow-y: auto;
        padding: 20px;
        display: flex;
        flex-direction: column;
      }

      .message-row {
        display: flex;
        margin-bottom: 15px;
      }

      .message-row.sent {
        justify-content: flex-end;
      }

      .message-row.received {
        justify-content: flex-start;
      }

      .message {
        max-width: 70%;
        display: flex;
        align-items: flex-end;
      }

      .message-body {
        padding: 10px 15px;
        border-radius: 20px;
        color: #333;
        word-wrap: break-word;
      }

      .sent .message-body {
        background-color: #8de055;
        color: black;
      }

      .received .message-body {
        background-color: #ffffff;
      }

      .message-time {
        font-size: 0.75em;
        color: #999;
        margin: 0 5px;
        white-space: nowrap;
      }

      .message-form-container {
        padding: 10px;
        background-color: #f0f0f0;
        border-top: 1px solid #ddd;
      }

      .message-form {
        display: flex;
        align-items: center;
      }

      .message-form textarea {
        flex-grow: 1;
        border-radius: 20px;
        border: 1px solid #ccc;
        padding: 10px 15px;
        resize: none;
        min-height: 20px;
        max-height: 100px;
        overflow-y: auto;
      }

      .send-button {
        background-color: #4CAF50;
        color: white;
        border: none;
        padding: 10px 15px;
        border-radius: 20px;
        margin-left: 10px;
        cursor: pointer;
      }

      .send-button:hover {
        background-color: #45a049;
      }
    </style>
    
    <!-- Stimulus JavaScript -->
    <script type="module">
      import { Application, Controller } from "https://unpkg.com/@hotwired/stimulus/dist/stimulus.js"
      
      const application = Application.start()
      
      // Image Test Controller
      class ImageTestController extends Controller {
        static targets = ["image"]
        
        connect() {
          console.log("Image Test Controller connected!")
        }

        imageClicked() {
          console.log("Image clicked via test controller!")
          alert("Image click detected!")
        }
      }
      
      // Image Comments Controller  
      class ImageCommentsController extends Controller {
        static targets = ["image", "form", "commentForm", "markersContainer", "toggleButton", "toggleIcon", "toggleText", "markerCount"]
        static values = { postId: Number, readOnly: Boolean }

        connect() {
          console.log("Image Comments Controller connected!")
          console.log("Post ID:", this.postIdValue)
          console.log("Read Only:", this.readOnlyValue)
          console.log("Available targets:", this.targets)
          console.log("Has toggleButton target:", this.hasToggleButtonTarget)
          
          // グローバル設定があれば初期状態はそれに従う、読み取り専用の場合
          if (this.readOnlyValue) {
            this.markersVisible = localStorage.getItem('globalCommentPinsVisible') === 'true'
          } else {
            this.markersVisible = false // 詳細ページでは従来通り
          }
          
          // 読み取り専用でない場合のみクリックリスナーを設定
          if (!this.readOnlyValue) {
            this.setupImageClickListener()
          }
          
          this.loadExistingComments()
          this.setupResizeListener()
          this.updateToggleButton()
          
          // グローバルピン切り替えイベントを監視（すべてのモードで）
          window.addEventListener('globalCommentPinsToggled', this.handleGlobalToggle.bind(this))
        }

        setupResizeListener() {
          // ウィンドウリサイズ時にマーカーの位置を再計算
          let resizeTimeout
          window.addEventListener('resize', () => {
            clearTimeout(resizeTimeout)
            resizeTimeout = setTimeout(() => {
              if (this.existingComments) {
                console.log("Recalculating marker positions after resize")
                this.renderComments(this.existingComments)
              }
            }, 150) // デバウンス処理
          })
        }

        setupImageClickListener() {
          console.log("Setting up image click listener...")
          if (!this.hasImageTarget) {
            console.error("Image target not found!")
            return
          }
          
          this.imageTarget.addEventListener("click", (event) => {
            console.log("Image clicked!")
            const rect = this.imageTarget.getBoundingClientRect()
            const x = event.clientX - rect.left
            const y = event.clientY - rect.top
            
            // 画像に対する相対的な位置（パーセンテージ）で保存
            const xPercent = (x / rect.width) * 100
            const yPercent = (y / rect.height) * 100
            
            console.log(`Click position: ${x}, ${y} (${xPercent.toFixed(2)}%, ${yPercent.toFixed(2)}%)`)
            
            this.hideForm()
            this.showFormAt(x, y, xPercent, yPercent)
          })
        }

        showFormAt(x, y, xPercent, yPercent) {
          console.log("Showing form at:", x, y, `(${xPercent}%, ${yPercent}%)`)
          if (!this.hasFormTarget) {
            console.error("Form target not found!")
            return
          }
          
          this.formTarget.style.left = x + "px"
          this.formTarget.style.top = y + "px"
          this.formTarget.classList.remove("hidden")
          console.log("Form should be visible now")
          
          // パーセンテージで位置を保存
          const xField = this.formTarget.querySelector("input[name='comment[x_position]']")
          const yField = this.formTarget.querySelector("input[name='comment[y_position]']")
          
          if (xField) xField.value = xPercent.toFixed(2)
          if (yField) yField.value = yPercent.toFixed(2)
          
          const textarea = this.formTarget.querySelector("textarea")
          if (textarea) {
            textarea.focus()
            textarea.value = ""
          }
        }

        hideForm() {
          if (this.hasFormTarget) {
            this.formTarget.classList.add("hidden")
          }
        }

        async loadExistingComments() {
          console.log("Loading existing comments...")
          
          try {
            const response = await fetch(`/posts/${this.postIdValue}/comments.json`)
            if (response.ok) {
              const comments = await response.json()
              const imageComments = comments.filter(comment => 
                comment.x_position !== null && comment.y_position !== null
              )
              console.log("Loaded image comments:", imageComments)
              this.existingComments = imageComments
              
              // 画像が読み込み完了してからコメントを描画
              if (this.hasImageTarget) {
                if (this.imageTarget.complete && this.imageTarget.naturalWidth > 0) {
                  this.renderComments(imageComments)
                } else {
                  this.imageTarget.addEventListener('load', () => {
                    this.renderComments(imageComments)
                  }, { once: true })
                  // フォールバック
                  setTimeout(() => {
                    this.renderComments(imageComments)
                  }, 200)
                }
              }
              
              // 読み取り専用モードで既存のコメントがある場合は初期状態でマーカーを表示
              if (this.readOnlyValue && imageComments.length > 0) {
                this.markersVisible = localStorage.getItem('globalCommentPinsVisible') === 'true'
              } else if (imageComments.length > 0) {
                this.markersVisible = true
              }
            } else {
              console.log("Could not load comments via API, using fallback")
              this.loadCommentsFromDOM()
            }
          } catch (error) {
            console.error("Error loading comments:", error)
            this.loadCommentsFromDOM()
          }
        }

        loadCommentsFromDOM() {
          // フォールバック: DOM要素から読み込み
          const commentElements = document.querySelectorAll('[data-comment-id]')
          const comments = []
          
          commentElements.forEach((element, index) => {
            const commentId = element.dataset.commentId
            const commentText = element.querySelector('p')?.textContent
            
            if (commentText && element.closest('.bg-blue-50')) {
              comments.push({
                id: commentId,
                body: commentText.trim(),
                x_position: 25 + (index * 10), // 仮の位置（パーセンテージ）
                y_position: 25 + (index * 5),
                number: index + 1
              })
            }
          })
          
          this.existingComments = comments
          this.renderComments(comments)
          
          // 既存のコメントがある場合は初期状態でマーカーを表示
          if (comments.length > 0) {
            this.markersVisible = true
          }
        }

        renderComments(comments) {
          if (!this.hasMarkersContainerTarget) {
            console.error("Markers container not found!")
            return
          }
          
          const container = this.markersContainerTarget
          container.innerHTML = "" // 既存のマーカーをクリア
          
          comments.forEach((comment, index) => {
            this.createMarker(comment, index + 1)
          })
          
          // マーカー表示状態を更新
          if (this.hasMarkersContainerTarget) {
            this.markersContainerTarget.style.display = this.markersVisible ? 'block' : 'none'
          }
          this.updateToggleButton()
        }

        createMarker(comment, number) {
          if (!this.hasImageTarget) {
            console.error("Image target not found for marker creation!")
            return
          }
          
          const marker = document.createElement("div")
          marker.className = "absolute w-8 h-8 bg-blue-500 text-white rounded-full flex items-center justify-center text-sm font-bold cursor-pointer z-10 transform -translate-x-1/2 -translate-y-1/2 transition-all duration-200 hover:scale-110"
          marker.textContent = number
          marker.dataset.commentId = comment.id
          marker.style.pointerEvents = "auto"
          
          // 画像が読み込み完了してからマーカーの位置を設定
          const positionMarker = () => {
            const imageRect = this.imageTarget.getBoundingClientRect()
            console.log(`Image rect for marker ${number}:`, imageRect.width, 'x', imageRect.height)
            
            // 画像サイズが0の場合は少し待ってから再試行
            if (imageRect.width === 0 || imageRect.height === 0) {
              console.log(`Image not ready for marker ${number}, retrying...`)
              setTimeout(positionMarker, 100)
              return
            }
            
            const xPixel = (comment.x_position / 100) * imageRect.width
            const yPixel = (comment.y_position / 100) * imageRect.height
            
            marker.style.left = `${xPixel}px`
            marker.style.top = `${yPixel}px`
            
            console.log(`Marker #${number} positioned at (${xPixel}, ${yPixel}) from (${comment.x_position}%, ${comment.y_position}%)`)
          }
          
          // 画像が既に読み込まれているかチェック
          if (this.imageTarget.complete && this.imageTarget.naturalWidth > 0) {
            positionMarker()
          } else {
            // 画像の読み込み完了を待つ
            this.imageTarget.addEventListener('load', positionMarker, { once: true })
            // 既に読み込み済みの場合のフォールバック
            setTimeout(positionMarker, 100)
          }
          
          // ツールチップ作成
          const tooltip = document.createElement("div")
          tooltip.className = "absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 bg-gray-800 text-white text-xs rounded py-1 px-2 whitespace-nowrap z-20 opacity-0 transition-opacity duration-200 pointer-events-none"
          tooltip.textContent = comment.body
          tooltip.style.maxWidth = "300px"
          tooltip.style.whiteSpace = "nowrap"
          tooltip.style.overflow = "hidden"
          tooltip.style.textOverflow = "ellipsis"
          
          // マーカーにツールチップを追加
          marker.appendChild(tooltip)
          
          // ホバーイベント
          marker.addEventListener("mouseenter", () => {
            tooltip.style.opacity = "1"
          })
          
          marker.addEventListener("mouseleave", () => {
            tooltip.style.opacity = "0"
          })
          
          // マーカーコンテナーに追加
          this.markersContainerTarget.appendChild(marker)
          console.log(`Created marker #${number} at (${comment.x_position}, ${comment.y_position})`)
        }

        async submitComment(event) {
          event.preventDefault()
          console.log("Submitting comment...")
          
          const form = event.target
          const formData = new FormData(form)
          
          try {
            const response = await fetch(form.action, {
              method: 'POST',
              body: formData,
              headers: {
                'Accept': 'application/json',
                'X-Requested-With': 'XMLHttpRequest',
                'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
              }
            })
            
            if (response.ok) {
              const comment = await response.json()
              console.log("Comment submitted successfully:", comment)
              
              // 新しいマーカーを追加
              const currentMarkersCount = this.markersContainerTarget.children.length
              this.createMarker(comment, currentMarkersCount + 1)
              
              // マーカーを表示状態に切り替え
              this.markersVisible = true
              if (this.hasMarkersContainerTarget) {
                this.markersContainerTarget.style.display = 'block'
              }
              this.updateToggleButton()
              
              // フォームを非表示にする
              this.hideForm()
              
              // 成功メッセージを表示
              this.showSuccessMessage()
              
              // 1秒後にページをリロードして通常のコメント一覧も更新
              setTimeout(() => {
                window.location.reload()
              }, 1000)
            } else {
              const errorData = await response.json()
              console.error('Comment submission failed:', errorData)
              alert('コメントの投稿に失敗しました。')
            }
          } catch (error) {
            console.error('Error submitting comment:', error)
            alert('エラーが発生しました。')
          }
        }

        showSuccessMessage() {
          const message = document.createElement('div')
          message.className = 'fixed top-4 right-4 bg-green-500 text-white px-4 py-2 rounded shadow-lg z-50'
          message.textContent = 'コメントを投稿しました！'
          document.body.appendChild(message)
          
          setTimeout(() => {
            message.remove()
          }, 3000)
        }

        toggleMarkers() {
          console.log("Toggling markers visibility")
          console.log("Current state:", this.markersVisible)
          console.log("Has markers container:", this.hasMarkersContainerTarget)
          
          this.markersVisible = !this.markersVisible
          console.log("New state:", this.markersVisible)
          
          if (this.hasMarkersContainerTarget) {
            const container = this.markersContainerTarget
            console.log("Container children count:", container.children.length)
            container.style.display = this.markersVisible ? 'block' : 'none'
            console.log("Container display set to:", container.style.display)
          }
          
          this.updateToggleButton()
          
          // 詳細ページで個別トグルを操作した場合、グローバル状態も更新
          if (!this.readOnlyValue) {
            localStorage.setItem('globalCommentPinsVisible', this.markersVisible)
            // グローバルコントローラーにも通知
            const globalController = document.querySelector('[data-controller*="global-comment-pins"]')
            if (globalController) {
              const controller = this.application.getControllerForElementAndIdentifier(globalController, 'global-comment-pins')
              if (controller) {
                controller.syncFromIndividual(this.markersVisible)
              }
            }
          }
        }

        updateToggleButton() {
          if (!this.hasToggleButtonTarget) return
          
          const button = this.toggleButtonTarget
          const icon = this.hasToggleIconTarget ? this.toggleIconTarget : null
          const text = this.hasToggleTextTarget ? this.toggleTextTarget : null
          const count = this.hasMarkerCountTarget ? this.markerCountTarget : null
          
          if (this.markersVisible) {
            // マーカー表示中の状態
            button.classList.remove('border-gray-300', 'hover:bg-gray-50')
            button.classList.add('border-blue-500', 'bg-blue-50', 'text-blue-700')
            if (icon) icon.textContent = '🙈'
            if (text) text.textContent = 'コメントピンを非表示'
          } else {
            // マーカー非表示中の状態
            button.classList.remove('border-blue-500', 'bg-blue-50', 'text-blue-700')
            button.classList.add('border-gray-300', 'hover:bg-gray-50')
            if (icon) icon.textContent = '👁️'
            if (text) text.textContent = 'コメントピンを表示'
          }
          
          // マーカー数を表示
          if (count && this.hasMarkersContainerTarget) {
            const markerCount = this.markersContainerTarget.children.length
            if (markerCount > 0) {
              count.textContent = `(${markerCount}件のコメント)`
            } else {
              count.textContent = ''
            }
          }
        }

        // グローバルピン切り替えイベントのハンドラー
        handleGlobalToggle(event) {
          console.log("Global toggle received:", event.detail.visible, "ReadOnly:", this.readOnlyValue)
          this.markersVisible = event.detail.visible
          if (this.hasMarkersContainerTarget) {
            this.markersContainerTarget.style.display = this.markersVisible ? 'block' : 'none'
          }
          this.updateToggleButton()
        }

        // グローバルコントローラーから呼び出される関数
        setGlobalMarkersVisibility(visible) {
          console.log("Setting global visibility:", visible, "ReadOnly:", this.readOnlyValue)
          this.markersVisible = visible
          if (this.hasMarkersContainerTarget) {
            this.markersContainerTarget.style.display = this.markersVisible ? 'block' : 'none'
          }
          this.updateToggleButton()
        }

        disconnect() {
          // イベントリスナーを削除（すべてのモードで）
          window.removeEventListener('globalCommentPinsToggled', this.handleGlobalToggle.bind(this))
        }
      }

      // Global Comment Pins Controller
      class GlobalCommentPinsController extends Controller {
        static targets = ["toggleButton", "toggleIcon", "toggleText"]

        connect() {
          console.log("Global Comment Pins Controller connected!")
          this.globalPinsVisible = localStorage.getItem('globalCommentPinsVisible') === 'true'
          this.updateButtonState()
          this.updateAllPins()
        }

        toggleGlobalPins() {
          console.log("Toggling global comment pins")
          this.globalPinsVisible = !this.globalPinsVisible
          localStorage.setItem('globalCommentPinsVisible', this.globalPinsVisible)
          
          this.updateButtonState()
          this.updateAllPins()
          
          // カスタムイベントを発火して他のコントローラーに通知
          window.dispatchEvent(new CustomEvent('globalCommentPinsToggled', {
            detail: { visible: this.globalPinsVisible }
          }))
        }

        updateButtonState() {
          if (!this.hasToggleButtonTarget) return
          
          const button = this.toggleButtonTarget
          const icon = this.hasToggleIconTarget ? this.toggleIconTarget : null
          const text = this.hasToggleTextTarget ? this.toggleTextTarget : null
          
          if (this.globalPinsVisible) {
            button.classList.remove('border-gray-300', 'hover:bg-gray-50')
            button.classList.add('border-blue-500', 'bg-blue-50', 'text-blue-700')
            if (icon) icon.textContent = '🙈'
            if (text) text.textContent = 'コメントピン一括非表示'
          } else {
            button.classList.remove('border-blue-500', 'bg-blue-50', 'text-blue-700')
            button.classList.add('border-gray-300', 'hover:bg-gray-50')
            if (icon) icon.textContent = '👁️'
            if (text) text.textContent = 'コメントピン一括表示'
          }
        }

        updateAllPins() {
          // すべてのimage-commentsコントローラーのマーカーの表示状態を更新
          const imageCommentsElements = document.querySelectorAll('[data-controller*="image-comments"]')
          imageCommentsElements.forEach(element => {
            const controller = this.application.getControllerForElementAndIdentifier(element, 'image-comments')
            if (controller) {
              controller.setGlobalMarkersVisibility(this.globalPinsVisible)
            }
          })
        }

        // 個別コントローラーからの同期
        syncFromIndividual(visible) {
          this.globalPinsVisible = visible
          this.updateButtonState()
        }
      }
      
      // AI Comment Assistant Controller
      class AiCommentAssistantController extends Controller {
        static targets = [
          "toggleButton", "assistantContent", "loading", "results", "error",
          "commentExamples", "observationPoints", "observationToggle", "observationIcon"
        ]
        static values = { postId: Number }

        connect() {
          console.log("AI Comment Assistant Controller connected!")
          console.log("Post ID:", this.postIdValue)
        }

        async toggleAssistant() {
          const isHidden = this.assistantContentTarget.classList.contains('hidden')
          
          if (isHidden) {
            // 補助機能を開始
            this.assistantContentTarget.classList.remove('hidden')
            this.toggleButtonTarget.textContent = '補助を閉じる'
            this.toggleButtonTarget.classList.remove('bg-blue-600', 'hover:bg-blue-700')
            this.toggleButtonTarget.classList.add('bg-gray-500', 'hover:bg-gray-600')
            
            // 既に結果が表示されている場合は分析をスキップ
            if (!this.resultsTarget.classList.contains('hidden')) {
              return
            }
            
            // AI分析を開始
            await this.analyzePost()
          } else {
            // 補助機能を閉じる
            this.assistantContentTarget.classList.add('hidden')
            this.toggleButtonTarget.textContent = '補助を開始'
            this.toggleButtonTarget.classList.remove('bg-gray-500', 'hover:bg-gray-600')
            this.toggleButtonTarget.classList.add('bg-blue-600', 'hover:bg-blue-700')
          }
        }

        async analyzePost() {
          // ローディング表示
          this.showLoading()
          
          try {
            const response = await fetch(`/posts/${this.postIdValue}/ai_comment_assistant/analyze`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content,
                'Accept': 'application/json'
              }
            })
            
            const data = await response.json()
            
            if (data.success) {
              this.displayResults(data.comment_examples, data.observation_points)
            } else {
              this.showError(data.error || 'AI分析中にエラーが発生しました。')
            }
          } catch (error) {
            console.error('AI Comment Assistant Error:', error)
            this.showError('ネットワークエラーが発生しました。インターネット接続を確認してください。')
          }
        }

        showLoading() {
          this.hideAllStates()
          this.loadingTarget.classList.remove('hidden')
        }

        displayResults(commentExamples, observationPoints) {
          this.hideAllStates()
          
          // コメント例を表示
          this.renderCommentExamples(commentExamples)
          
          // 観察ポイントを表示
          this.renderObservationPoints(observationPoints)
          
          this.resultsTarget.classList.remove('hidden')
        }

        showError(message) {
          this.hideAllStates()
          this.errorTarget.textContent = message
          this.errorTarget.classList.remove('hidden')
        }

        hideAllStates() {
          this.loadingTarget.classList.add('hidden')
          this.resultsTarget.classList.add('hidden')
          this.errorTarget.classList.add('hidden')
        }

        renderCommentExamples(examples) {
          this.commentExamplesTarget.innerHTML = ''
          
          examples.forEach((example, index) => {
            const exampleDiv = document.createElement('div')
            exampleDiv.className = 'p-3 bg-white rounded-lg border border-gray-200 hover:border-blue-300 transition-colors cursor-pointer'
            exampleDiv.innerHTML = `
              <div class="flex items-start gap-3">
                <span class="flex-shrink-0 w-6 h-6 bg-blue-100 text-blue-600 rounded-full flex items-center justify-center text-sm font-semibold">${index + 1}</span>
                <div class="flex-1">
                  <p class="text-gray-800 leading-relaxed">${this.escapeHtml(example)}</p>
                  <div class="mt-2 flex gap-2">
                    <button type="button" 
                            class="text-xs text-blue-600 hover:text-blue-800 font-medium"
                            data-action="click->ai-comment-assistant#useComment"
                            data-comment="${this.escapeHtml(example)}">
                      このコメントを使用
                    </button>
                    <button type="button" 
                            class="text-xs text-gray-500 hover:text-gray-700 font-medium"
                            data-action="click->ai-comment-assistant#editComment"
                            data-comment="${this.escapeHtml(example)}">
                      編集して使用
                    </button>
                  </div>
                </div>
              </div>
            `
            this.commentExamplesTarget.appendChild(exampleDiv)
          })
        }

        renderObservationPoints(points) {
          this.observationPointsTarget.innerHTML = ''
          
          const pointsList = document.createElement('ul')
          pointsList.className = 'space-y-2'
          
          points.forEach(point => {
            const li = document.createElement('li')
            li.className = 'flex items-start gap-2 text-gray-700'
            li.innerHTML = `
              <span class="flex-shrink-0 w-2 h-2 bg-blue-400 rounded-full mt-2"></span>
              <span>${this.escapeHtml(point)}</span>
            `
            pointsList.appendChild(li)
          })
          
          this.observationPointsTarget.appendChild(pointsList)
        }

        toggleObservationPoints() {
          const isHidden = this.observationPointsTarget.classList.contains('hidden')
          
          if (isHidden) {
            this.observationPointsTarget.classList.remove('hidden')
            this.observationIconTarget.textContent = '▲'
          } else {
            this.observationPointsTarget.classList.add('hidden')
            this.observationIconTarget.textContent = '▼'
          }
        }

        useComment(event) {
          const comment = event.currentTarget.dataset.comment
          this.insertCommentIntoForm(comment)
        }

        editComment(event) {
          const comment = event.currentTarget.dataset.comment
          this.insertCommentIntoForm(comment)
          
          // コメントフォームにフォーカスを当てる
          const commentTextArea = document.querySelector('textarea[name="comment[body]"]')
          if (commentTextArea) {
            commentTextArea.focus()
            // テキストの最後にカーソルを移動
            commentTextArea.setSelectionRange(commentTextArea.value.length, commentTextArea.value.length)
          }
        }

        insertCommentIntoForm(comment) {
          const commentTextArea = document.querySelector('textarea[name="comment[body]"]')
          if (commentTextArea) {
            commentTextArea.value = comment
            
            // 高さを自動調整（もしauto-resizeがある場合）
            commentTextArea.dispatchEvent(new Event('input', { bubbles: true }))
            
            // 成功フィードバック
            this.showSuccessMessage('コメントをフォームに挿入しました')
          } else {
            console.error('Comment textarea not found')
            alert('コメントフォームが見つかりません')
          }
        }

        showSuccessMessage(message) {
          const successDiv = document.createElement('div')
          successDiv.className = 'fixed top-4 right-4 bg-green-500 text-white px-4 py-2 rounded-lg shadow-lg z-50 transform translate-x-0 opacity-100 transition-all duration-300'
          successDiv.textContent = message
          
          document.body.appendChild(successDiv)
          
          // 3秒後にフェードアウト
          setTimeout(() => {
            successDiv.classList.add('translate-x-full', 'opacity-0')
            setTimeout(() => {
              if (successDiv.parentNode) {
                successDiv.parentNode.removeChild(successDiv)
              }
            }, 300)
          }, 3000)
        }

        escapeHtml(text) {
          const div = document.createElement('div')
          div.textContent = text
          return div.innerHTML
        }
      }
      
      // Compact Comments Controller
      class CompactCommentsController extends Controller {
        static targets = ["toggleButton", "toggleIcon", "commentsList"]

        connect() {
          console.log("Compact Comments Controller connected!")
          this.isExpanded = false
        }

        toggleComments() {
          this.isExpanded = !this.isExpanded
          
          if (this.isExpanded) {
            // コメント一覧を表示
            this.commentsListTarget.classList.remove('hidden')
            this.toggleIconTarget.textContent = '▲'
          } else {
            // コメント一覧を非表示
            this.commentsListTarget.classList.add('hidden')
            this.toggleIconTarget.textContent = '▼'
          }
        }

        // コンパクトコメントがクリックされた時の処理
        highlightComment(event) {
          const commentElement = event.currentTarget
          const commentId = commentElement.dataset.commentId
          
          // 既存のハイライトをリセット
          document.querySelectorAll('.compact-comment-highlight').forEach(el => {
            el.classList.remove('compact-comment-highlight')
          })
          
          // クリックされたコメントをハイライト
          commentElement.classList.add('compact-comment-highlight')
          
          // 対応するピンがあればハイライト（既存の機能を活用）
          if (commentId) {
            const imageController = document.querySelector('[data-controller*="image-comments"]')
            if (imageController) {
              const event = new CustomEvent('highlightMarker', {
                detail: { commentId: commentId }
              })
              imageController.dispatchEvent(event)
            }
          }
          
          // 2秒後にハイライトを削除
          setTimeout(() => {
            commentElement.classList.remove('compact-comment-highlight')
          }, 2000)
        }
      }

      // AI Sidebar Controller
      class AiSidebarController extends Controller {
        static targets = [
          "toggleButton", "toggleIcon", "toggleText", 
          "initialMessage", "loading", "aiContent",
          "commentSuggestions", "summary"
        ]
        static values = { postId: Number }

        connect() {
          console.log("AI Sidebar Controller connected!")
          this.aiLoaded = false
        }

        toggleAI() {
          const isAIVisible = !this.aiContentTarget.classList.contains('hidden')
          
          if (isAIVisible) {
            // AI機能を閉じる
            this.closeAI()
          } else {
            // AI機能を開始
            this.startAI()
          }
        }

        async startAI() {
          // 初期メッセージを隠す
          this.initialMessageTarget.classList.add('hidden')
          
          // ローディング表示
          this.loadingTarget.classList.remove('hidden')
          
          // ボタンの状態を更新
          this.toggleIconTarget.textContent = '⏳'
          this.toggleTextTarget.textContent = 'AI分析中...'
          this.toggleButtonTarget.disabled = true

          try {
            if (!this.aiLoaded) {
              // AI機能を初回のみ読み込み
              await this.loadAIContent()
              this.aiLoaded = true
            }
            
            // ローディングを隠してコンテンツを表示
            this.loadingTarget.classList.add('hidden')
            this.aiContentTarget.classList.remove('hidden')
            
            // ボタンの状態を更新
            this.toggleIconTarget.textContent = '✖️'
            this.toggleTextTarget.textContent = 'AI補助を閉じる'
            this.toggleButtonTarget.classList.remove('bg-purple-600', 'hover:bg-purple-700')
            this.toggleButtonTarget.classList.add('bg-gray-600', 'hover:bg-gray-700')
            
          } catch (error) {
            console.error('AI loading error:', error)
            this.showError()
          } finally {
            this.toggleButtonTarget.disabled = false
          }
        }

        closeAI() {
          // すべてのAI関連要素を隠す
          this.loadingTarget.classList.add('hidden')
          this.aiContentTarget.classList.add('hidden')
          
          // 初期メッセージを表示
          this.initialMessageTarget.classList.remove('hidden')
          
          // ボタンの状態をリセット
          this.toggleIconTarget.textContent = '🤖'
          this.toggleTextTarget.textContent = 'AI補助を開始'
          this.toggleButtonTarget.classList.remove('bg-gray-600', 'hover:bg-gray-700')
          this.toggleButtonTarget.classList.add('bg-purple-600', 'hover:bg-purple-700')
        }

        async loadAIContent() {
          try {
            // 実際のAI分析APIを呼び出し
            const response = await fetch(`/posts/${this.postIdValue}/ai_comment_assistant/analyze`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content,
                'Accept': 'application/json'
              }
            })
            
            const data = await response.json()
            
            if (data.success) {
              // AI分析結果を表示
              this.renderSuggestions(data.comment_examples)
              
              // 観察ポイントを要約として表示
              if (this.hasSummaryTarget && data.observation_points) {
                const summary = data.observation_points.join(' / ')
                this.summaryTarget.textContent = `観察ポイント: ${summary}`
              }
            } else {
              // エラー時はフォールバック
              this.renderFallbackContent()
            }
          } catch (error) {
            console.error('AI analysis error:', error)
            this.renderFallbackContent()
          }
        }

        renderFallbackContent() {
          // フォールバック用のコンテンツ
          const fallbackSuggestions = [
            "この投稿の表現力が素晴らしいですね。特に印象的な部分があります。",
            "とても興味深い内容です。どのような思いで制作されたのでしょうか？",
            "技術的な工夫が感じられる投稿ですね。今後の作品も楽しみです。"
          ]
          
          this.renderSuggestions(fallbackSuggestions)
          
          if (this.hasSummaryTarget) {
            this.summaryTarget.textContent = "投稿の内容や技法に注目して、建設的なコメントを心がけましょう。"
          }
        }

        renderSuggestions(suggestions) {
          this.commentSuggestionsTarget.innerHTML = ''
          
          suggestions.forEach((suggestion, index) => {
            const suggestionElement = document.createElement('div')
            suggestionElement.className = 'p-2 bg-purple-50 rounded border cursor-pointer hover:bg-purple-100 transition-colors text-sm mb-2'
            suggestionElement.innerHTML = `
              <p class="text-gray-700 mb-2">${suggestion}</p>
              <button class="text-xs text-purple-600 hover:text-purple-800 font-medium" 
                      data-action="click->ai-sidebar#applySuggestion" 
                      data-suggestion="${suggestion}">
                このコメントを使用
              </button>
            `
            this.commentSuggestionsTarget.appendChild(suggestionElement)
          })
        }

        simulateAIProcessing() {
          // AI処理のシミュレーション
          return new Promise(resolve => {
            setTimeout(resolve, 1500)
          })
        }

        showError() {
          this.loadingTarget.classList.add('hidden')
          this.initialMessageTarget.classList.remove('hidden')
          
          const errorMessage = document.createElement('div')
          errorMessage.className = 'text-center py-4 text-red-600 text-sm'
          errorMessage.textContent = 'AI機能の読み込みに失敗しました。再試行してください。'
          
          this.initialMessageTarget.appendChild(errorMessage)
          
          setTimeout(() => {
            errorMessage.remove()
          }, 5000)
        }

        applySuggestion(event) {
          const suggestion = event.currentTarget.dataset.suggestion
          this.insertIntoCommentField(suggestion)
        }

        applyTone(event) {
          const tone = event.currentTarget.dataset.tone
          const currentText = this.getCurrentCommentText()
          
          let tonePrefix = ""
          switch(tone) {
            case "褒める":
              tonePrefix = "素晴らしい！"
              break
            case "質問":
              tonePrefix = "興味深いですね。"
              break
            case "建設的":
              tonePrefix = "改善案として、"
              break
            case "励まし":
              tonePrefix = "頑張っていますね！"
              break
          }
          
          const newText = currentText ? `${tonePrefix} ${currentText}` : tonePrefix
          this.insertIntoCommentField(newText)
        }

        insertIntoCommentField(text) {
          // メインのコメント入力フィールドを探す
          const commentField = document.querySelector('textarea[name="comment[body]"]')
          if (commentField) {
            commentField.value = text
            commentField.focus()
            // 入力イベントを発火してバリデーション等をトリガー
            commentField.dispatchEvent(new Event('input', { bubbles: true }))
            
            // 成功のフィードバック
            this.showAppliedFeedback()
          }
        }

        getCurrentCommentText() {
          const commentField = document.querySelector('textarea[name="comment[body]"]')
          return commentField ? commentField.value : ""
        }

        showAppliedFeedback() {
          // 一時的なフィードバック表示
          const feedback = document.createElement('div')
          feedback.className = 'fixed top-4 right-4 bg-purple-500 text-white px-4 py-2 rounded-lg shadow-lg z-50 transform transition-all duration-300'
          feedback.textContent = '提案を適用しました！'
          document.body.appendChild(feedback)
          
          // アニメーション
          setTimeout(() => {
            feedback.style.transform = 'translateY(-10px)'
            feedback.style.opacity = '0'
          }, 2000)
          
          setTimeout(() => {
            feedback.remove()
          }, 2500)
        }
      }

      // Register controllers
      application.register("image-test", ImageTestController)
      application.register("image-comments", ImageCommentsController)
      application.register("global-comment-pins", GlobalCommentPinsController)
      application.register("ai-comment-assistant", AiCommentAssistantController)
      application.register("compact-comments", CompactCommentsController)
      application.register("ai-sidebar", AiSidebarController)
      
      // グローバルアクセス用
      window.application = application
      
      console.log("Stimulus application started and controllers registered!")
    </script>
  </head>

  <body class="bg-gray-100 text-gray-800">
    <div class="flex">
      <!-- サイドバー -->
      <%= render 'layouts/sidebar' %>

      <!-- メインコンテンツ -->
      <main class="flex-1 p-8 ml-64">
        <% if notice %>
          <div class="bg-green-100 text-green-800 p-4 rounded mb-4"><%= notice %></div>
        <% end %>

        <% if alert %>
          <div class="bg-red-100 text-red-800 p-4 rounded mb-4"><%= alert %></div>
        <% end %>

        <%= yield %>
      </main>
    </div>
  </body>
</html>