<div class="max-w-4xl mx-auto p-6">
  <div class="bg-white rounded-lg shadow-md p-8">
    <h1 class="text-3xl font-bold text-gray-800 mb-6">送信相手を選択</h1>
    <div class="mb-4 p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
      <p class="text-sm text-yellow-800">
        <span class="font-semibold">📋 注意:</span> 送信相手は最大5人まで選択できます。
      </p>
    </div>
    
    <div class="mb-6 p-4 bg-blue-50 rounded-lg">
      <h3 class="font-bold text-blue-800 mb-2">投稿内容プレビュー</h3>
      <p class="text-lg font-semibold"><%= @post.title %></p>
      <p class="text-gray-600 mt-2"><%= truncate(@post.body, length: 100) %></p>
    </div>

    <%= form_with url: post_send_to_user_path(@post), method: :post, local: true, class: "space-y-8" do |form| %>
      
      <!-- アドバイザータイプ選択セクション -->
      <div class="space-y-6">
        <h2 class="text-xl font-bold text-gray-800 mb-4">どのような人からアドバイスをもらいますか？</h2>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <label class="flex items-center p-4 border-2 border-gray-200 rounded-lg cursor-pointer hover:border-indigo-300 transition-colors" id="creator-option">
            <input type="radio" name="advisor_type" value="creator" class="h-4 w-4 text-indigo-600">
            <div class="ml-3">
              <div class="text-lg font-semibold text-gray-800">クリエイターからアドバイス</div>
              <div class="text-sm text-gray-600">実際に制作経験がある人から具体的なアドバイス</div>
            </div>
          </label>
          <label class="flex items-center p-4 border-2 border-gray-200 rounded-lg cursor-pointer hover:border-indigo-300 transition-colors" id="commenter-option">
            <input type="radio" name="advisor_type" value="commenter" class="h-4 w-4 text-indigo-600">
            <div class="ml-3">
              <div class="text-lg font-semibold text-gray-800">コメンターからアドバイス</div>
              <div class="text-sm text-gray-600">視聴者・読者の視点から感想やアドバイス</div>
            </div>
          </label>
        </div>
        
        <!-- ジャンル選択（アドバイザータイプ選択時に表示） -->
        <div id="genre-selection" class="hidden mt-6">
          <h3 class="text-lg font-semibold text-gray-800 mb-3">対象ジャンルを選択</h3>
          <div class="grid grid-cols-2 md:grid-cols-3 gap-3">
            <% ['イラスト・絵画', 'マンガ・コミック', '小説・詩・エッセイ', '音楽制作・作詞作曲', '映像制作・動画編集', 'ゲーム制作・プログラミング', 'デザイン・グラフィック', '写真・撮影技術', '舞台・演劇・パフォーマンス', '手芸・クラフト', 'その他'].each do |genre| %>
              <label class="flex items-center p-2 rounded border hover:bg-gray-50">
                <input type="checkbox" name="target_genres[]" value="<%= genre %>" class="h-4 w-4 text-indigo-600">
                <span class="ml-2 text-sm"><%= genre %></span>
              </label>
            <% end %>
          </div>
          
          <!-- 自動検索ボタン -->
          <div class="mt-4">
            <button type="button" id="auto-search-btn" 
                    class="px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700">
              条件に合うユーザーを検索
            </button>
          </div>
        </div>
      </div>

      <!-- フリーワード検索セクション -->
      <div class="space-y-6">
        <h2 class="text-xl font-bold text-gray-800 mb-4">フリーワードで検索</h2>
        <p class="text-sm text-gray-600 mb-3">
          ユーザー名・フィードバックできること・ジャンル・経験・年齢などで検索できます
        </p>
        <div class="flex gap-4 mb-4">
          <input type="text" id="user-search" placeholder="例：イラスト、DTM、小説、ミックス、20代..." 
                 class="flex-1 p-3 border border-gray-300 rounded-lg focus:ring-indigo-500 focus:border-indigo-500">
          <button type="button" id="search-btn" 
                  class="px-6 py-3 bg-gray-600 text-white rounded-lg hover:bg-gray-700">
            検索
          </button>
        </div>
        <div id="search-results" class="space-y-2">
          <!-- 検索結果がここに表示される -->
        </div>
      </div>


      <!-- マッチング結果表示エリア -->
      <div id="matching-results" class="hidden border-t pt-6">
        <h2 class="text-xl font-bold text-gray-800 mb-4">おすすめのユーザー</h2>
        <p class="text-gray-600 mb-4">絞り込み条件に合致するユーザーを表示しています。</p>
        <div id="user-list" class="space-y-3">
          <!-- JavaScriptで動的に挿入 -->
        </div>
      </div>

      <!-- 選択されたユーザー表示 -->
      <div id="selected-users" class="hidden p-4 bg-green-50 border border-green-200 rounded-lg">
        <h3 class="font-semibold text-green-800 mb-2">送信先ユーザー</h3>
        <div id="selected-users-list" class="space-y-2"></div>
        <%= form.hidden_field :selected_user_ids, id: "selected_user_ids" %>
      </div>

      <!-- 送信ボタン -->
      <div class="text-center pt-6">
        <%= form.submit "選択したユーザーに送信", 
            class: "px-8 py-3 bg-indigo-600 text-white rounded-lg font-bold text-lg hover:bg-indigo-700 transition-colors disabled:bg-gray-400", 
            id: "submit-btn", 
            disabled: true %>
      </div>
    <% end %>
  </div>
</div>

<script>
// ページ読み込み時の初期化
document.addEventListener('DOMContentLoaded', function() {

  // アドバイザータイプ選択時の処理
  const advisorTypeInputs = document.querySelectorAll('input[name="advisor_type"]');
  const genreSelection = document.getElementById('genre-selection');
  const creatorOption = document.getElementById('creator-option');
  const commenterOption = document.getElementById('commenter-option');
  
  advisorTypeInputs.forEach(input => {
    input.addEventListener('change', function() {
      if (this.checked) {
        // ジャンル選択を表示
        genreSelection.classList.remove('hidden');
        
        // 選択されたオプションのスタイルを変更
        creatorOption.classList.remove('border-indigo-500', 'bg-indigo-50');
        commenterOption.classList.remove('border-indigo-500', 'bg-indigo-50');
        
        if (this.value === 'creator') {
          creatorOption.classList.add('border-indigo-500', 'bg-indigo-50');
        } else if (this.value === 'commenter') {
          commenterOption.classList.add('border-indigo-500', 'bg-indigo-50');
        }
      }
    });
  });
  
  // 自動検索ボタンの処理
  const autoSearchBtn = document.getElementById('auto-search-btn');
  autoSearchBtn.addEventListener('click', function() {
    showMatchingUsersWithAdvisorType();
  });

});

// 旧showMatchingUsers関数は削除

async function showMatchingUsersWithAdvisorType() {
  try {
    const advisorType = document.querySelector('input[name="advisor_type"]:checked')?.value;
    const targetGenres = Array.from(document.querySelectorAll('input[name="target_genres[]"]:checked')).map(cb => cb.value);

    const params = new URLSearchParams();
    if (advisorType) params.append('advisor_type', advisorType);
    targetGenres.forEach(g => params.append('target_genres[]', g));
    
    const response = await fetch(`<%= post_match_users_path(@post) %>?${params.toString()}`);
    const data = await response.json();
    
    if (data.error) {
      console.error('Matching error:', data.error);
      return;
    }
    
    displayMatchingResults(data.users, advisorType);
    
  } catch (error) {
    console.error('Matching API error:', error);
  }
}

function displayMatchingResults(users, advisorType = null) {
  const userListDiv = document.getElementById('user-list');
  
  userListDiv.innerHTML = '';
  if (users.length > 0) {
    users.forEach(user => {
      const userDiv = document.createElement('div');
      userDiv.className = 'p-3 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer';
      
      const advisorBadge = advisorType ? `<span class="inline-block px-2 py-1 text-xs rounded ${
        advisorType === 'creator' ? 'bg-blue-100 text-blue-800' : 'bg-green-100 text-green-800'
      }">${advisorType === 'creator' ? 'クリエイター' : 'コメンター'}</span>` : '';
      
      userDiv.innerHTML = `
        <div class="flex justify-between items-center">
          <div>
            <h4 class="font-semibold">${user.name} ${advisorBadge}</h4>
            <p class="text-sm text-gray-600">${user.description}</p>
            <p class="text-xs text-indigo-600 mt-1">マッチ度: ${user.score}%</p>
          </div>
          <button type="button" onclick="selectUser(${user.id}, '${user.name}')" 
                  class="px-4 py-2 bg-indigo-600 text-white rounded hover:bg-indigo-700"
                  id="select-btn-${user.id}">
            選択
          </button>
        </div>
      `;
      userListDiv.appendChild(userDiv);
    });
  } else {
    userListDiv.innerHTML = '<p class="text-gray-500">条件に合うユーザーが見つかりませんでした。</p>';
  }
  document.getElementById('matching-results').classList.remove('hidden');
}

// フリーワード検索機能
document.getElementById('search-btn').addEventListener('click', async () => {
  const query = document.getElementById('user-search').value.trim();
  if (!query) return;
  
  const resultsDiv = document.getElementById('search-results');
  resultsDiv.innerHTML = '<p class="text-gray-500">検索中...</p>';
  
  try {
    const response = await fetch(`/search_simple?query=${encodeURIComponent(query)}&search_type=users`);
    const html = await response.text();
    
    // HTMLレスポンスをそのまま挿入
    resultsDiv.innerHTML = html;
    
  } catch (error) {
    console.error('検索エラー:', error);
    resultsDiv.innerHTML = '<p class="text-red-500">検索中にエラーが発生しました</p>';
  }
});

// Enterキーでも検索実行
document.getElementById('user-search').addEventListener('keypress', (e) => {
  if (e.key === 'Enter') {
    document.getElementById('search-btn').click();
  }
});

// 検索結果から選択する関数
function selectUserFromSearch(userId, userName) {
  selectUser(userId, userName);
}

// 選択済みユーザーを管理する配列
let selectedUsers = [];

// ユーザー選択関数（複数選択対応・5人制限）
function selectUser(userId, userName) {
  const existingIndex = selectedUsers.findIndex(user => user.id === userId);
  const button = document.getElementById(`select-btn-${userId}`);
  
  if (existingIndex !== -1) {
    // 既に選択済み - 選択解除
    selectedUsers.splice(existingIndex, 1);
    button.textContent = '選択';
    button.classList.remove('bg-gray-500', 'hover:bg-gray-600');
    button.classList.add('bg-indigo-600', 'hover:bg-indigo-700');
    
    // 選択解除時、他のボタンを再有効化
    updateButtonStates();
  } else {
    // 新規選択 - 5人制限チェック
    if (selectedUsers.length >= 5) {
      alert('送信相手は最大5人まで選択できます。');
      return;
    }
    
    selectedUsers.push({ id: userId, name: userName });
    button.textContent = '選択済み';
    button.classList.remove('bg-indigo-600', 'hover:bg-indigo-700');
    button.classList.add('bg-gray-500', 'hover:bg-gray-600');
    
    // 5人に達した場合、他のボタンを無効化
    if (selectedUsers.length >= 5) {
      updateButtonStates();
    }
  }
  
  updateSelectedUsersDisplay();
}

// 選択ユーザー表示を更新
function updateSelectedUsersDisplay() {
  const container = document.getElementById('selected-users');
  const list = document.getElementById('selected-users-list');
  const submitBtn = document.getElementById('submit-btn');
  const hiddenInput = document.getElementById('selected_user_ids');
  
  if (selectedUsers.length > 0) {
    // 選択済みユーザーを表示
    list.innerHTML = selectedUsers.map(user => `
      <div class="flex items-center justify-between bg-white p-2 rounded border">
        <span><strong>${user.name}</strong></span>
        <button type="button" onclick="removeUser(${user.id})" 
                class="text-red-500 hover:text-red-700 text-sm">
          削除
        </button>
      </div>
    `).join('');
    
    container.classList.remove('hidden');
    submitBtn.disabled = false;
    
    // 選択ユーザーIDを隠しフィールドに設定
    hiddenInput.value = selectedUsers.map(user => user.id).join(',');
    
    // ボタンテキストを更新
    submitBtn.textContent = `${selectedUsers.length}人のユーザーに送信 (${selectedUsers.length}/5)`;
  } else {
    // 選択なしの状態
    container.classList.add('hidden');
    submitBtn.disabled = true;
    submitBtn.textContent = '選択したユーザーに送信';
    hiddenInput.value = '';
  }
}

// ボタン状態更新関数
function updateButtonStates() {
  const allSelectButtons = document.querySelectorAll('[id^="select-btn-"]');
  
  allSelectButtons.forEach(button => {
    const userId = parseInt(button.id.replace('select-btn-', ''));
    const isSelected = selectedUsers.some(user => user.id === userId);
    
    if (!isSelected) {
      if (selectedUsers.length >= 5) {
        // 5人に達している場合、未選択ボタンを無効化
        button.disabled = true;
        button.classList.add('opacity-50', 'cursor-not-allowed');
        button.classList.remove('hover:bg-indigo-700');
      } else {
        // 5人未満の場合、未選択ボタンを有効化
        button.disabled = false;
        button.classList.remove('opacity-50', 'cursor-not-allowed');
        button.classList.add('hover:bg-indigo-700');
      }
    }
  });
}

// ユーザー削除関数
function removeUser(userId) {
  const index = selectedUsers.findIndex(user => user.id === userId);
  if (index !== -1) {
    selectedUsers.splice(index, 1);
    
    // ボタンの状態もリセット
    const button = document.getElementById(`select-btn-${userId}`);
    if (button) {
      button.textContent = '選択';
      button.classList.remove('bg-gray-500', 'hover:bg-gray-600');
      button.classList.add('bg-indigo-600', 'hover:bg-indigo-700');
    }
    
    // ボタン状態を更新
    updateButtonStates();
    updateSelectedUsersDisplay();
  }
}
</script>
